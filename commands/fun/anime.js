const { EmbedBuilder } = require("discord.js");
const fetch = require("node-fetch");

function removeVietnameseTones(str) {
        str = str.replace(/√†|√°|·∫°|·∫£|√£|√¢|·∫ß|·∫•|·∫≠|·∫©|·∫´|ƒÉ|·∫±|·∫Ø|·∫∑|·∫≥|·∫µ/g, "a");
        str = str.replace(/√®|√©|·∫π|·∫ª|·∫Ω|√™|·ªÅ|·∫ø|·ªá|·ªÉ|·ªÖ/g, "e");
        str = str.replace(/√¨|√≠|·ªã|·ªâ|ƒ©/g, "i");
        str = str.replace(/√≤|√≥|·ªç|·ªè|√µ|√¥|·ªì|·ªë|·ªô|·ªï|·ªó|∆°|·ªù|·ªõ|·ª£|·ªü|·ª°/g, "o");
        str = str.replace(/√π|√∫|·ª•|·ªß|≈©|∆∞|·ª´|·ª©|·ª±|·ª≠|·ªØ/g, "u");
        str = str.replace(/·ª≥|√Ω|·ªµ|·ª∑|·ªπ/g, "y");
        str = str.replace(/ƒë/g, "d");
        str = str.replace(/√Ä|√Å|·∫†|·∫¢|√É|√Ç|·∫¶|·∫§|·∫¨|·∫®|·∫™|ƒÇ|·∫∞|·∫Æ|·∫∂|·∫≤|·∫¥/g, "A");
        str = str.replace(/√à|√â|·∫∏|·∫∫|·∫º|√ä|·ªÄ|·∫æ|·ªÜ|·ªÇ|·ªÑ/g, "E");
        str = str.replace(/√å|√ç|·ªä|·ªà|ƒ®/g, "I");
        str = str.replace(/√í|√ì|·ªå|·ªé|√ï|√î|·ªí|·ªê|·ªò|·ªî|·ªñ|∆†|·ªú|·ªö|·ª¢|·ªû|·ª†/g, "O");
        str = str.replace(/√ô|√ö|·ª§|·ª¶|≈®|∆Ø|·ª™|·ª®|·ª∞|·ª¨|·ªÆ/g, "U");
        str = str.replace(/·ª≤|√ù|·ª¥|·ª∂|·ª∏/g, "Y");
        str = str.replace(/ƒê/g, "D");
        // M·ªôt s·ªë h·ªá th·ªëng m√£ h√≥a d·∫•u ti·∫øng Vi·ªát nh∆∞ c√°c k√Ω t·ª± utf-8 ri√™ng bi·ªát
        // M·ªôt v√†i b·ªô encode coi c√°c d·∫•u m≈©, d·∫•u ch·ªØ nh∆∞ m·ªôt k√≠ t·ª± ri√™ng bi·ªát n√™n th√™m hai d√≤ng n√†y
        str = str.replace(/\u0300|\u0301|\u0303|\u0309|\u0323/g, ""); // ÃÄ ÃÅ ÃÉ Ãâ Ã£  huy·ªÅn, s·∫Øc, ng√£, h·ªèi, n·∫∑ng
        str = str.replace(/\u02C6|\u0306|\u031B/g, ""); // ÀÜ ÃÜ Ãõ  √Ç, √ä, ƒÇ, ∆†, ∆Ø
        // X√≥a c√°c kho·∫£ng tr·∫Øng th·ª´a
        // B·ªè c√°c kho·∫£ng tr·∫Øng li·ªÅn nhau
        str = str.replace(/ + /g, " ");
        str = str.trim();
        // X√≥a d·∫•u c√¢u
        // B·ªè d·∫•u c√¢u, k√≠ t·ª± ƒë·∫∑c bi·ªát
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|\"|\&|\#|\[|\]|~|\$|_|`|-|{|}|\||\\/g, " ");
        return str;
}

function getTitle(anime) {
        return anime?.titles?.en_jp || anime?.titles?.en || anime.titles?.ja_jp || "unknown";
}

module.exports.Zisearch = async (params) => {
        try {
                let search = encodeURI(removeVietnameseTones(params));
                const Link = "https://kitsu.io/api/edge/" + "anime?filter[text]=" + search + "&page[limit]=" + 2;
                const response = await fetch(Link);
                const body = await response.json();
                return body.data;
        } catch (e) {
                console.log(e);
                return [];
        }
};

module.exports.data = {
        name: "anime",
        description: "Get anime information.",
        type: 1, // slash command
        options: [
                {
                        name: "name",
                        description: "Name anime",
                        type: 3, // string
                        required: true,
                        autocomplete: true,
                },
        ],
        integration_types: [0, 1],
        contexts: [0, 1, 2],
};

/**
 * @param { object } command - object command
 * @param { import ("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import('../../lang/vi.js') } command.lang - language
 */

module.exports.execute = async ({ interaction, lang }) => {
        await interaction.deferReply();

        const { options, user } = interaction;
        const query = options.getString("name", true);
        const [name, id] = query.split(":::");
        const data = await this.Zisearch(name);

        if (!data.length) {
                await interaction.editReply({
                        embeds: [
                                new EmbedBuilder()
                                        .setColor(lang?.color || "Random")
                                        .setTimestamp()
                                        .setDescription(lang?.until.noresult)
                                        .setFooter({
                                                text: `${lang.until.requestBy} ${user?.username}`,
                                                iconURL: user.displayAvatarURL({ size: 1024 }),
                                        }),
                        ],
                });

                return;
        }
        let anime = null;
        if (id) anime = data?.find((anime) => anime.id === id);
        if (anime) anime = anime.attributes;
        else anime = data?.at(0).attributes;

        const title = getTitle(anime);

        const info = new EmbedBuilder()
                .setColor(lang?.color || "Random")
                .setTitle(`**${title}**`)
                .setURL(`https://kitsu.io/anime/${anime?.id}`)
                .setDescription(
                        `**Synopsis:**\n> ${anime?.synopsis.replace(/<[^>]*>/g, "").split("\n")[0]}
        **[[Trailer]](https://www.youtube.com/watch?v=${anime?.youtubeVideoId})**`,
                )
                .setTimestamp()
                .setThumbnail(anime?.posterImage?.original || user.displayAvatarURL({ size: 1024 }))
                .setImage(anime?.coverImage?.large || lang.botConfig.Banner)
                .setFooter({
                        text: `${lang.until.requestBy} ${user?.username}`,
                        iconURL: user.displayAvatarURL({ size: 1024 }),
                })
                .addFields([
                        {
                                name: "**üóìÔ∏è Date:**",
                                value: `${anime?.startDate ? anime.startDate : "Unknown"}/${anime?.endDate ? anime.endDate : "Unknown"}`,
                                inline: true,
                        },
                        { name: "**‚≠ê Rating:**", value: `${anime?.averageRating ? anime.averageRating : "??"}`, inline: true },
                        { name: "**üìá Type:**", value: `${anime?.showType ? anime.showType : "Unknown"}`, inline: true },
                        { name: "**üéûÔ∏è Episodes:**", value: `${anime?.episodeCount ? anime.episodeCount : "??"}`, inline: true },
                        { name: "**‚è±Ô∏è Duration:**", value: `${anime?.episodeLength ? anime.episodeLength : "??"} minutes`, inline: true },
                        { name: "**üèÜ Rank:**", value: `${anime?.ratingRank ? anime.ratingRank : "Unknwon"}`, inline: true },
                ]);
        await interaction?.editReply({ content: ``, embeds: [info] }).catch(() => {});
        return;
};

/**
 * @param { object } autocomplete - object autocomplete
 * @param { AutocompleteInteraction } autocomplete.interaction - interaction
 * @param { import('../../lang/vi.js') } autocomplete.lang - language
 */

module.exports.autocomplete = async ({ interaction, lang }) => {
        try {
                const name = interaction.options.getString("name", true);
                const data = await this.Zisearch(name);
                if (!data.length) return;

                await interaction.respond(
                        data.map((anime) => ({
                                name: getTitle(anime.attributes),
                                value: `${getTitle(anime.attributes)}:::${anime.id}`,
                        })),
                );
                return;
        } catch (e) {
                console.error(e);
        }
};
