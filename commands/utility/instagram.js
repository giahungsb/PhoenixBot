const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const InstagramDownloaderAPI = require("../../lib/instagram-downloader-api");

const downloaderAPI = new InstagramDownloaderAPI();

module.exports = {
        data: {
                name: "instagram",
                description: "T·∫£i ·∫£nh/video t·ª´ Instagram",
                type: 1,
                options: [
                        {
                                name: "url",
                                description: "Link b√†i vi·∫øt Instagram (VD: https://www.instagram.com/p/...)",
                                type: 3,
                                required: true,
                        },
                ],
                integration_types: [0, 1],
                contexts: [0, 1, 2],
        },

        async execute({ interaction, lang }) {
                await interaction.deferReply();

                const urlInput = interaction.options.getString("url");

                const instagramRegex = /(?:https?:\/\/)?(?:www\.)?instagram\.com\/(?:p|reel|tv)\/([A-Za-z0-9_-]+)/;
                const match = urlInput.match(instagramRegex);

                if (!match) {
                        return interaction.editReply({
                                content: "‚ùå Vui l√≤ng nh·∫≠p link Instagram h·ª£p l·ªá (post/reel/tv).",
                        });
                }

                const shortcode = match[1];
                console.log(`[INSTAGRAM] ƒêang t·∫£i media t·ª´ shortcode: ${shortcode}`);

                try {
                        const mediaData = await this.getInstagramMedia(urlInput, shortcode);

                        if (!mediaData.success) {
                                return interaction.editReply({
                                        content: `‚ùå ${mediaData.error || "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin t·ª´ Instagram. Vui l√≤ng th·ª≠ l·∫°i sau."}`,
                                });
                        }

                        const authorEmbed = new EmbedBuilder()
                                .setColor("#E4405F")
                                .setTitle("üì∏ Th√¥ng tin b√†i vi·∫øt Instagram")
                                .setURL(urlInput)
                                .addFields(
                                        { name: "üë§ T√°c gi·∫£", value: mediaData.author || "N/A", inline: true },
                                        { name: "üìä Lo·∫°i", value: mediaData.mediaType || "N/A", inline: true },
                                        { name: "üì• Media", value: `${mediaData.mediaCount || 1} file(s)`, inline: true },
                                )
                                .setTimestamp()
                                .setFooter({
                                        text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}`,
                                        iconURL: interaction.user.displayAvatarURL({ size: 1024 }),
                                });

                        if (mediaData.title) {
                                const shortTitle = mediaData.title.length > 200 ? mediaData.title.substring(0, 200) + "..." : mediaData.title;
                                authorEmbed.setDescription(`**üìù Ti√™u ƒë·ªÅ:**\n${shortTitle}`);
                        }

                        if (mediaData.thumbnail) {
                                authorEmbed.setThumbnail(mediaData.thumbnail);
                        }

                        const downloadEmbed = new EmbedBuilder()
                                .setColor("#00D9FF")
                                .setTitle("‚¨áÔ∏è T·∫£i v·ªÅ")
                                .setDescription("Nh·∫•n v√†o button b√™n d∆∞·ªõi ƒë·ªÉ t·∫£i media v·ªÅ m√°y c·ªßa b·∫°n!\n\nüí° **Ch·∫•t l∆∞·ª£ng:** HD (T·ªëi ƒëa)")
                                .setFooter({
                                        text: `IGDL|${shortcode}|uid=${interaction.user.id}`,
                                });

                        const downloadButton = new ButtonBuilder()
                                .setCustomId("B_instagram_download")
                                .setLabel("üì• T·∫£i v·ªÅ HD")
                                .setStyle(ButtonStyle.Success);

                        const row = new ActionRowBuilder().addComponents(downloadButton);

                        return interaction.editReply({
                                embeds: [authorEmbed, downloadEmbed],
                                components: [row],
                        });
                } catch (error) {
                        console.error("[INSTAGRAM] ‚ùå L·ªói khi t·∫£i media:", error.message);
                        console.error("[INSTAGRAM] Stack:", error.stack);
                        return interaction.editReply({
                                content: "‚ùå C√≥ l·ªói x·∫£y ra khi t·∫£i media t·ª´ Instagram. Vui l√≤ng th·ª≠ l·∫°i sau.",
                        });
                }
        },

        async getInstagramMedia(url, shortcode) {
                console.log(`[INSTAGRAM] ƒêang t·∫£i media t·ª´ Instagram...`);
                
                try {
                        const result = await downloaderAPI.getMedia(url);
                        
                        if (result && result.success) {
                                console.log(`[INSTAGRAM] ‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng: ${result.method}`);

                                return {
                                        success: true,
                                        shortcode: shortcode,
                                        author: result.username || "Instagram User",
                                        title: result.caption || "",
                                        thumbnail: result.thumbnail || null,
                                        mediaType: result.mediaItems?.[0]?.type === 'video' ? 'Video' : 'Photo',
                                        mediaCount: result.mediaCount || 1,
                                        apiUsed: result.method || "Snapsave",
                                        downloadUrl: result.downloadUrl,
                                        mediaItems: result.mediaItems,
                                };
                        }
                } catch (error) {
                        console.log(`[INSTAGRAM] ‚ö†Ô∏è Download th·∫•t b·∫°i: ${error.message}`);
                        
                        return {
                                success: false,
                                error: "‚ùå Kh√¥ng th·ªÉ t·∫£i t·ª´ Instagram. API hi·ªán ƒëang g·∫∑p v·∫•n ƒë·ªÅ.\n\n" +
                                       "üí° **C√≥ th·ªÉ th·ª≠:**\n" +
                                       "- Ki·ªÉm tra link c√≥ ƒë√∫ng kh√¥ng\n" +
                                       "- Post/Reel ph·∫£i ·ªü ch·∫ø ƒë·ªô public\n" +
                                       "- Th·ª≠ l·∫°i sau v√†i ph√∫t",
                        };
                }
        },
};
