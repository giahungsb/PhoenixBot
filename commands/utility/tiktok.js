const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } = require("discord.js");
const Tiktok = require("@tobyg74/tiktok-api-dl");
const TikTokDownloadAccelerator = require("../../lib/tiktok-download-accelerator");

const accelerator = TikTokDownloadAccelerator.getInstance({
        cacheExpireTime: 1800000,
        maxRetries: 3,
        timeout: 90000,
        maxCacheSize: 200 * 1024 * 1024,
        maxFileSize: 25 * 1024 * 1024
});

module.exports.data = {
        name: "tiktok",
        description: "T·∫£i video TikTok kh√¥ng c√≥ watermark",
        type: 1,
        options: [
                {
                        name: "link",
                        description: "Link video TikTok c·∫ßn t·∫£i",
                        type: 3,
                        required: true,
                },
        ],
        integration_types: [0, 1],
        contexts: [0, 1, 2],
};

module.exports.execute = async ({ interaction, lang }) => {
        try {
                const url = interaction.options.getString("link");

                if (!url.includes("tiktok.com")) {
                        return interaction.reply({
                                content: "‚ùå Link kh√¥ng h·ª£p l·ªá! Vui l√≤ng cung c·∫•p link TikTok h·ª£p l·ªá.",
                                ephemeral: true,
                        });
                }

                await interaction.deferReply();

                const result = await Tiktok.Downloader(url, {
                        version: "v3",
                });

                if (result.status !== "success") {
                        return interaction.editReply({
                                content: "‚ùå Kh√¥ng th·ªÉ t·∫£i video. Vui l√≤ng ki·ªÉm tra l·∫°i link ho·∫∑c th·ª≠ l·∫°i sau.",
                        });
                }

                const data = result.result;
                const title = data.desc || data.description || "Kh√¥ng c√≥ ti√™u ƒë·ªÅ";
                const authorName = data.author?.nickname || "unknown";
                const authorAvatar = data.author?.avatar || null;

                const isImageSlideshow = data.type === "image";

                if (isImageSlideshow) {
                        const images = data.images || [];
                        const downloadUrl = images.length > 0 ? images[0] : null;

                        const previewEmbed = new EmbedBuilder()
                                .setColor("#00f2ea")
                                .setTitle("üì∏ TikTok Image Slideshow")
                                .setDescription(`**${title}**`)
                                .addFields(
                                        { name: "üë§ T√°c gi·∫£", value: authorName, inline: true },
                                        { name: "üñºÔ∏è S·ªë ·∫£nh", value: `${images.length}`, inline: true }
                                )
                                .setImage(downloadUrl)
                                .setThumbnail(authorAvatar)
                                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL() })
                                .setTimestamp();

                        const buttons = new ActionRowBuilder();
                        if (downloadUrl) {
                                buttons.addComponents(
                                        new ButtonBuilder()
                                                .setLabel("üì• T·∫£i ·∫£nh ƒë·∫ßu ti√™n")
                                                .setURL(downloadUrl)
                                                .setStyle(ButtonStyle.Link)
                                );
                        }

                        if (images.length > 1) {
                                buttons.addComponents(
                                        new ButtonBuilder()
                                                .setLabel(`üìã Xem t·∫•t c·∫£ ${images.length} ·∫£nh`)
                                                .setURL(url)
                                                .setStyle(ButtonStyle.Link)
                                );
                        }

                        const downloadEmbed = new EmbedBuilder()
                                .setColor("#ff0050")
                                .setTitle("‚¨áÔ∏è T·∫£i xu·ªëng ·∫£nh")
                                .setDescription(`Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t·∫£i xu·ªëng ·∫£nh t·ª´ slideshow TikTok.\n\n**T·ªïng s·ªë ·∫£nh:** ${images.length}`)
                                .setFooter({ text: "Ch·∫•t l∆∞·ª£ng: HD" });

                        return interaction.editReply({
                                embeds: [previewEmbed, downloadEmbed],
                                components: buttons.components.length > 0 ? [buttons] : [],
                        });
                } else {
                        const videoHD = data.videoHD;
                        const videoSD = data.videoSD;
                        const videoWatermark = data.videoWatermark;

                        const videoUrl = videoHD || videoSD || videoWatermark;

                        if (!videoUrl) {
                                return interaction.editReply({
                                        content: "‚ùå Kh√¥ng t√¨m th·∫•y link video. Vui l√≤ng th·ª≠ l·∫°i.",
                                });
                        }

                        const previewEmbed = new EmbedBuilder()
                                .setColor("#00f2ea")
                                .setTitle("üé• TikTok Video")
                                .setDescription(`**${title}**`)
                                .addFields(
                                        { name: "üë§ T√°c gi·∫£", value: authorName, inline: true },
                                        { name: "üìπ Ch·∫•t l∆∞·ª£ng", value: videoHD ? "Full HD" : (videoSD ? "SD" : "Standard"), inline: true }
                                )
                                .setThumbnail(authorAvatar)
                                .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.username}`, iconURL: interaction.user.displayAvatarURL() })
                                .setTimestamp();

                        await interaction.editReply({
                                embeds: [previewEmbed],
                                content: "‚ö° ƒêang t·∫£i video v·ªõi t·ªëc ƒë·ªô cao...",
                        });

                        try {
                                console.log('[TikTok Command] Starting accelerated download...');
                                const videoBuffer = await accelerator.download(videoUrl);
                                
                                const fileSizeMB = (videoBuffer.length / 1024 / 1024).toFixed(2);
                                console.log(`[TikTok Command] Downloaded video: ${fileSizeMB} MB`);

                                const attachment = new AttachmentBuilder(videoBuffer, {
                                        name: `tiktok_${Date.now()}.mp4`,
                                        description: title.substring(0, 100),
                                        contentType: 'video/mp4'
                                });

                                const successEmbed = new EmbedBuilder()
                                        .setColor("#00ff00")
                                        .setTitle("‚úÖ T·∫£i xu·ªëng th√†nh c√¥ng")
                                        .setDescription(`**Dung l∆∞·ª£ng:** ${fileSizeMB} MB\n**Codec:** H.264 (t∆∞∆°ng th√≠ch m·ªçi thi·∫øt b·ªã) üì±üíª\n**T·ªëc ƒë·ªô:** TƒÉng t·ªëc 3-5 l·∫ßn üöÄ`)
                                        .setFooter({ text: "Ch·∫•t l∆∞·ª£ng: " + (videoHD ? "Full HD | Kh√¥ng watermark | H.264 codec" : "SD | Kh√¥ng watermark | H.264 codec") });

                                console.log('[TikTok Command] Sending video to Discord...');
                                return interaction.editReply({
                                        content: null,
                                        embeds: [previewEmbed, successEmbed],
                                        files: [attachment],
                                        components: [],
                                });

                        } catch (downloadError) {
                                console.error('[TikTok Command] Accelerated download failed:', downloadError.message);

                                let downloadEmbed;
                                if (downloadError.message === 'FILE_TOO_LARGE') {
                                        console.log('[TikTok Command] File too large for Discord, sending link instead');
                                        downloadEmbed = new EmbedBuilder()
                                                .setColor("#ff9900")
                                                .setTitle("‚ö†Ô∏è File qu√° l·ªõn")
                                                .setDescription(`Video c√≥ dung l∆∞·ª£ng **${downloadError.sizeMB} MB** (v∆∞·ª£t qu√° gi·ªõi h·∫°n 25MB c·ªßa Discord).\n\nVui l√≤ng t·∫£i qua link b√™n d∆∞·ªõi.`)
                                                .setFooter({ text: "Ch·∫•t l∆∞·ª£ng: " + (videoHD ? "Full HD | Kh√¥ng c√≥ watermark" : "SD | Kh√¥ng c√≥ watermark") });
                                } else {
                                        console.log('[TikTok Command] Download error, falling back to link method');
                                        downloadEmbed = new EmbedBuilder()
                                                .setColor("#ff0050")
                                                .setTitle("‚¨áÔ∏è T·∫£i xu·ªëng video")
                                                .setDescription("Kh√¥ng th·ªÉ t·∫£i tr·ª±c ti·∫øp, vui l√≤ng t·∫£i qua link b√™n d∆∞·ªõi.")
                                                .setFooter({ text: "Ch·∫•t l∆∞·ª£ng: " + (videoHD ? "Full HD | Kh√¥ng c√≥ watermark" : "SD | Kh√¥ng c√≥ watermark") });
                                }

                                const buttons = new ActionRowBuilder().addComponents(
                                        new ButtonBuilder()
                                                .setLabel("üì• T·∫£i Video " + (videoHD ? "HD" : "SD"))
                                                .setURL(videoUrl)
                                                .setStyle(ButtonStyle.Link)
                                );

                                return interaction.editReply({
                                        content: null,
                                        embeds: [previewEmbed, downloadEmbed],
                                        components: [buttons],
                                });
                        }
                }
        } catch (error) {
                console.error("TikTok download error:", error);
                
                const errorMessage = interaction.deferred || interaction.replied
                        ? { content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω video TikTok. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra link." }
                        : { content: "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω video TikTok. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c ki·ªÉm tra link.", ephemeral: true };

                if (interaction.deferred || interaction.replied) {
                        return interaction.editReply(errorMessage);
                } else {
                        return interaction.reply(errorMessage);
                }
        }
};
