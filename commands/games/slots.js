const { EmbedBuilder } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");
const { updateQuestProgress } = require("./quests");

const maxBet = 250000;
const zigoldEmoji = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold
const slotEmojis = ["üçá", "üçä", "üçã", "üçå", "üçé", "üçì", "ü•ù", "ü••"];
const spinEmoji = "üé∞";

// C√°c t·ªï h·ª£p chi·∫øn th·∫Øng v√† h·ªá s·ªë nh√¢n
const winningCombos = {
        // Ba c√πng lo·∫°i
        triple: { multiplier: 5, description: "Triple!" },
        // Hai gi·ªëng nhau + m·ªôt kh√°c
        double: { multiplier: 2, description: "Double!" },
        // T·∫•t c·∫£ kh√°c nhau
        lose: { multiplier: 0, description: "Better luck next time!" },
};

module.exports.data = {
        name: "slots",
        description: "Tr√≤ ch∆°i slots v·ªõi h·ªá th·ªëng c∆∞·ª£c ZiGold",
        type: 1,
        options: [
                {
                        name: "bet",
                        description: "S·ªë ZiGold mu·ªën c∆∞·ª£c (m·∫∑c ƒë·ªãnh: 100)",
                        type: 4,
                        required: false,
                        min_value: 1,
                        max_value: maxBet,
                },
        ],
        integration_types: [0],
        contexts: [0, 1],
};

/**
 * @param { object } command - object command
 * @param { import("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import("../../lang/vi.js") } command.lang - language
 */
module.exports.execute = async ({ interaction, lang }) => {
        const DataBase = useDB();
        let bet = interaction.options.getInteger("bet") || 100;
        const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

        // X√°c th·ª±c s·ªë ti·ªÅn c∆∞·ª£c
        if (bet <= 0) {
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói")
                        .setColor("#FF0000")
                        .setDescription("B·∫°n kh√¥ng th·ªÉ c∆∞·ª£c s·ªë ti·ªÅn <= 0!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        if (bet > maxBet) {
                bet = maxBet;
        }

        // Ki·ªÉm tra t√¨nh tr·∫°ng c∆° s·ªü d·ªØ li·ªáu
        if (!DataBase) {
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói Database")
                        .setColor("#FF0000")
                        .setDescription("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database. Vui l√≤ng th·ª≠ l·∫°i sau!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        try {
                // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë·ªß ZiGold kh√¥ng
                const userDB = await DataBase.ZiUser.findOne({ userID: interaction.user.id });
                const userBalance = userDB?.coin || 0;

                if (userBalance < bet) {
                        const errorEmbed = new EmbedBuilder()
                                .setTitle("‚ùå Kh√¥ng ƒë·ªß ZiGold")
                                .setColor("#FF0000")
                                .setDescription(
                                        `B·∫°n kh√¥ng c√≥ ƒë·ªß ZiGold ƒë·ªÉ c∆∞·ª£c! B·∫°n c√≥ **${userBalance.toLocaleString()} ZiGold** nh∆∞ng c·∫ßn **${bet.toLocaleString()} ZiGold**.`,
                                )
                                .addFields({
                                        name: "üí° G·ª£i √Ω",
                                        value: "S·ª≠ d·ª•ng `/zigold` ƒë·ªÉ ki·ªÉm tra s·ªë d∆∞ ho·∫∑c `/daily` ƒë·ªÉ nh·∫≠n ZiGold mi·ªÖn ph√≠!",
                                });
                        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
                }

                // Initial spinning embed
                const spinningEmbed = new EmbedBuilder()
                        .setTitle(`${spinEmoji} ZiGold Slots`)
                        .setColor("#FFD700")
                        .setDescription(
                                `**${userName}** ƒë√£ c∆∞·ª£c **${zigoldEmoji} ${bet.toLocaleString()} ZiGold**\n\n` +
                                        `${spinEmoji} ${spinEmoji} ${spinEmoji}\n` +
                                        `üé∞ M√°y slots ƒëang quay...`,
                        )
                        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));

                const message = await interaction.reply({ embeds: [spinningEmbed], fetchReply: true });

                // Simulate slot machine delay
                setTimeout(async () => {
                        try {
                                // First, atomically deduct the bet amount
                                const deductResult = await DataBase.ZiUser.findOneAndUpdate(
                                        { userID: interaction.user.id, coin: { $gte: bet } },
                                        { $inc: { coin: -bet, xp: 1 } },
                                        { new: true, upsert: false },
                                );

                                if (!deductResult) {
                                        const errorEmbed = new EmbedBuilder()
                                                .setTitle("‚ùå Kh√¥ng ƒë·ªß ZiGold")
                                                .setColor("#FF0000")
                                                .setDescription("B·∫°n kh√¥ng c√≤n ƒë·ªß ZiGold ƒë·ªÉ th·ª±c hi·ªán c∆∞·ª£c n√†y!");
                                        return await message.edit({ embeds: [errorEmbed] });
                                }

                                // Generate random slot results
                                const slot1 = slotEmojis[Math.floor(Math.random() * slotEmojis.length)];
                                const slot2 = slotEmojis[Math.floor(Math.random() * slotEmojis.length)];
                                const slot3 = slotEmojis[Math.floor(Math.random() * slotEmojis.length)];

                                // Determine win condition and multiplier
                                let winType, multiplier, resultText, embedColor;
                                let winAmount = 0;
                                let newBalance = deductResult.coin;

                                if (slot1 === slot2 && slot2 === slot3) {
                                        // Triple match - biggest win
                                        winType = "triple";
                                        multiplier = winningCombos.triple.multiplier;
                                        // Total payout = bet * multiplier (already deducted bet, so add full payout)
                                        winAmount = bet * multiplier;
                                        const totalPayout = winAmount;
                                        const profit = winAmount - bet;
                                        resultText = `üéâ ${winningCombos.triple.description} B·∫°n th·∫Øng **${zigoldEmoji} ${profit.toLocaleString()} ZiGold** (${multiplier}x)!`;
                                        embedColor = "#00FF00";
                                } else if (slot1 === slot2 || slot2 === slot3 || slot1 === slot3) {
                                        // Double match - medium win
                                        winType = "double";
                                        multiplier = winningCombos.double.multiplier;
                                        // Total payout = bet * multiplier (already deducted bet, so add full payout)
                                        winAmount = bet * multiplier;
                                        const totalPayout = winAmount;
                                        const profit = winAmount - bet;
                                        resultText = `üéä ${winningCombos.double.description} B·∫°n th·∫Øng **${zigoldEmoji} ${profit.toLocaleString()} ZiGold** (${multiplier}x)!`;
                                        embedColor = "#FFA500";
                                } else {
                                        // No match - lose
                                        winType = "lose";
                                        multiplier = 0;
                                        winAmount = 0;
                                        resultText = `üò¢ ${winningCombos.lose.description} B·∫°n thua **${zigoldEmoji} ${bet.toLocaleString()} ZiGold**`;
                                        embedColor = "#FF0000";
                                }

                                // Award winnings if applicable
                                if (winAmount > 0) {
                                        const winResult = await DataBase.ZiUser.findOneAndUpdate(
                                                { userID: interaction.user.id },
                                                { $inc: { coin: winAmount } },
                                                { new: true },
                                        );
                                        newBalance = winResult.coin;
                                        
                                        // Update quest progress for gambling wins
                                        await updateQuestProgress(DataBase, interaction.user.id, 'gamble', 1);
                                }

                                // Create detailed calculation text
                                let calculationText = "";
                                if (winAmount > 0) {
                                        const profit = winAmount - bet;
                                        calculationText =
                                                `üìä **C√°ch t√≠nh ti·ªÅn:**\n` +
                                                `‚Ä¢ Ti·ªÅn c∆∞·ª£c: -${bet.toLocaleString()} ZiGold\n` +
                                                `‚Ä¢ Payout (${multiplier}x): +${winAmount.toLocaleString()} ZiGold\n` +
                                                `‚Ä¢ L·ª£i nhu·∫≠n: +${profit.toLocaleString()} ZiGold\n\n`;
                                } else {
                                        calculationText =
                                                `üìä **C√°ch t√≠nh ti·ªÅn:**\n` +
                                                `‚Ä¢ Ti·ªÅn c∆∞·ª£c: -${bet.toLocaleString()} ZiGold\n` +
                                                `‚Ä¢ Kh√¥ng c√≥ combo n√†o ‚Üí Thua to√†n b·ªô\n\n`;
                                }

                                // Create result embed
                                const resultEmbed = new EmbedBuilder()
                                        .setTitle(`${spinEmoji} ZiGold Slots - K·∫øt qu·∫£`)
                                        .setColor(embedColor)
                                        .setDescription(
                                                `**${userName}** ƒë√£ c∆∞·ª£c **${zigoldEmoji} ${bet.toLocaleString()} ZiGold**\n\n` +
                                                        `${slot1} ${slot2} ${slot3}\n\n` +
                                                        `üéØ ${resultText}\n\n` +
                                                        `${calculationText}` +
                                                        `üí∞ **S·ªë d∆∞ m·ªõi: ${newBalance.toLocaleString()} ZiGold**`,
                                        )
                                        .addFields(
                                                {
                                                        name: "üé∞ T·ª∑ l·ªá th·∫Øng",
                                                        value: "üçáüçáüçá = 5x c∆∞·ª£c\nüçäüçäüçã = 2x c∆∞·ª£c\nüçáüçäüçã = Thua",
                                                        inline: true,
                                                },
                                                {
                                                        name: "üéÆ Th·ªëng k√™",
                                                        value: `C∆∞·ª£c: ${bet.toLocaleString()}\nK·∫øt qu·∫£: ${winAmount > 0 ? `+${(winAmount - bet).toLocaleString()}` : `-${bet.toLocaleString()}`}`,
                                                        inline: true,
                                                },
                                        )
                                        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));

                                await message.edit({ embeds: [resultEmbed] });
                        } catch (error) {
                                console.error("Slots error:", error);
                                const errorEmbed = new EmbedBuilder()
                                        .setTitle("‚ùå L·ªói")
                                        .setColor("#FF0000")
                                        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
                                await message.edit({ embeds: [errorEmbed] });
                        }
                }, 2500); // 2.5 second delay for suspense
        } catch (error) {
                console.error("Slots error:", error);
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói")
                        .setColor("#FF0000")
                        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
};
