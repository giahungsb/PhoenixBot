const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");

const cookieEmoji = "üç™"; // Bi·ªÉu t∆∞·ª£ng cookie
const zigoldEmoji = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold
const heartEmoji = "üíñ"; // Bi·ªÉu t∆∞·ª£ng tr√°i tim
const sparkleEmoji = "‚ú®"; // Bi·ªÉu t∆∞·ª£ng l·∫•p l√°nh
const giftEmoji = "üéÅ"; // Bi·ªÉu t∆∞·ª£ng qu√† t·∫∑ng
const starEmoji = "‚≠ê"; // Bi·ªÉu t∆∞·ª£ng ng√¥i sao

const COOKIE_COOLDOWN = 10 * 1000; // 10 gi√¢y gi·ªØa c√°c l·∫ßn t·∫∑ng cookie
const COOKIE_ZIGOLD_REWARD = 5; // Ph·∫ßn th∆∞·ªüng ZiGold cho vi·ªác t·∫∑ng cookie
const COOKIE_XP_REWARD = 2; // Ph·∫ßn th∆∞·ªüng XP cho vi·ªác t·∫∑ng cookie
const SPECIAL_COOKIE_CHANCE = 0.05; // 5% c∆° h·ªôi cho cookie ƒë·∫∑c bi·ªát

// Tin nh·∫Øn cookie th√∫ v·ªã
const COOKIE_MESSAGES = [
    "ƒë√£ t·∫∑ng b·∫°n m·ªôt chi·∫øc cookie ng·ªçt ng√†o!",
    "ƒë√£ g·ª≠i cho b·∫°n m·ªôt cookie ·∫•m √°p!",
    "ƒë√£ chia s·∫ª cookie y√™u th√≠ch v·ªõi b·∫°n!",
    "ƒë√£ l√†m cookie ƒë·∫∑c bi·ªát d√†nh cho b·∫°n!",
    "ƒë√£ n∆∞·ªõng cookie t∆∞∆°i cho b·∫°n!",
    "ƒë√£ t·∫∑ng b·∫°n cookie may m·∫Øn!",
    "ƒë√£ g·ª≠i cookie t√¨nh b·∫°n cho b·∫°n!"
];

const SPECIAL_COOKIE_MESSAGES = [
    "ƒë√£ t·∫∑ng b·∫°n m·ªôt chi·∫øc ‚ú®GOLDEN COOKIE‚ú® hi·∫øm c√≥!",
    "ƒë√£ l√†m ra m·ªôt üåüMAGIC COOKIEüåü ƒë·∫∑c bi·ªát cho b·∫°n!",
    "ƒë√£ n∆∞·ªõng m·ªôt üéØLUCKY COOKIEüéØ tuy·ªát v·ªùi cho b·∫°n!",
    "ƒë√£ t·∫°o ra m·ªôt üíéDIAMOND COOKIEüíé qu√Ω hi·∫øm cho b·∫°n!"
];

module.exports.data = {
    name: "cookie",
    description: "T·∫∑ng cookie ng·ªçt ng√†o cho b·∫°n b√® v√† nh·∫≠n ph·∫ßn th∆∞·ªüng!",
    type: 1,
    options: [
        {
            type: 6,
            name: "user",
            description: "Ng∆∞·ªùi b·∫°n mu·ªën t·∫∑ng cookie",
            required: false,
        },
    ],
    integration_types: [0, 1], // ·ª®ng d·ª•ng m√°y ch·ªß + ·ª®ng d·ª•ng ng∆∞·ªùi d√πng  
    contexts: [0, 1, 2], // M√°y ch·ªß + Tin nh·∫Øn ri√™ng + K√™nh ri√™ng t∆∞
    dm_permission: true,
    nsfw: false,
};

/**
 * @param { object } command - object command
 * @param { import("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import("../../lang/vi.js") } command.lang - language
 */
module.exports.execute = async ({ interaction, lang }) => {
    try {
        const ZiRank = useFunctions().get("ZiRank");
        const DataBase = useDB();

        // Ki·ªÉm tra xem c∆° s·ªü d·ªØ li·ªáu v√† c√°c h√†m ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch
        if (!DataBase || !DataBase.ZiUser || !ZiRank) {
            return await handleInitializationError(interaction, !DataBase);
        }

        const targetUser = interaction.options.getUser("user");
        
        if (targetUser) {
            // T·∫∑ng cookie cho ng∆∞·ªùi d√πng kh√°c
            await giveCookie(interaction, targetUser, DataBase, ZiRank);
        } else {
            // Hi·ªÉn th·ªã th·ªëng k√™ cookie
            await showCookieStats(interaction, DataBase);
        }

    } catch (error) {
        console.error("Error in cookie command:", error);
        await handleCommandError(interaction, error);
    }
};

async function handleInitializationError(interaction, isDatabaseError) {
    const errorEmbed = new EmbedBuilder()
        .setTitle(`‚ö†Ô∏è ${sparkleEmoji} Kh·ªüi t·∫°o h·ªá th·ªëng`)
        .setColor("#FFD700")
        .setDescription(
            isDatabaseError 
            ? `üîÑ **Database ƒëang kh·ªüi t·∫°o...**\n\n${sparkleEmoji} Vui l√≤ng ƒë·ª£i v√†i gi√¢y r·ªìi th·ª≠ l·∫°i!`
            : `üîÑ **H·ªá th·ªëng ZiRank ƒëang kh·ªüi t·∫°o...**\n\n${sparkleEmoji} Vui l√≤ng ƒë·ª£i v√†i gi√¢y r·ªìi th·ª≠ l·∫°i!`
        )
        .setFooter({ 
            text: "H·ªá th·ªëng s·∫Ω s·∫µn s√†ng trong gi√¢y l√°t!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();
    
    return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
}

async function giveCookie(interaction, targetUser, DataBase, ZiRank) {
    const userId = interaction.user.id;
    const targetId = targetUser.id;
    const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;
    const targetName = targetUser.member?.displayName ?? targetUser.globalName ?? targetUser.username;
    const now = new Date();

    // Check if trying to give cookie to self
    if (userId === targetId) {
        const selfErrorEmbed = new EmbedBuilder()
            .setTitle(`${cookieEmoji} Kh√¥ng th·ªÉ t·ª± t·∫∑ng cookie!`)
            .setColor("#FF6B9D")
            .setDescription(`**${userName}**, b·∫°n kh√¥ng th·ªÉ t·ª± t·∫∑ng cookie cho ch√≠nh m√¨nh!\n\n${heartEmoji} H√£y chia s·∫ª cookie v·ªõi b·∫°n b√® nh√©!`)
            .setFooter({ 
                text: "Cookie ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ chia s·∫ª t√¨nh y√™u th∆∞∆°ng!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [selfErrorEmbed], ephemeral: true });
    }

    // Check if target is a bot
    if (targetUser.bot) {
        const botErrorEmbed = new EmbedBuilder()
            .setTitle(`${cookieEmoji} Bot kh√¥ng c·∫ßn cookie!`)
            .setColor("#FF6B9D")
            .setDescription(`**${userName}**, bot kh√¥ng th·ªÉ ƒÉn cookie!\n\nü§ñ H√£y t·∫∑ng cookie cho con ng∆∞·ªùi th·∫≠t nh√©!`)
            .setFooter({ 
                text: "Bot ch·ªâ c·∫ßn ƒëi·ªán nƒÉng th√¥i!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [botErrorEmbed], ephemeral: true });
    }

    // Generate more robust unique cookie ID for this transaction
    const timestamp = now.getTime().toString().slice(-10); // Last 10 digits of timestamp for better uniqueness
    const cookieId = `${timestamp}_${userId.slice(-10)}_${targetId.slice(-10)}`; // Use 10 chars for better uniqueness
    const cooldownThreshold = new Date(now.getTime() - COOKIE_COOLDOWN);

    // Determine if special cookie
    const isSpecialCookie = Math.random() < SPECIAL_COOKIE_CHANCE;
    const zigoldBonus = isSpecialCookie ? COOKIE_ZIGOLD_REWARD * 3 : COOKIE_ZIGOLD_REWARD;
    const xpBonus = isSpecialCookie ? COOKIE_XP_REWARD * 2 : COOKIE_XP_REWARD;

    // Atomic cooldown check and update giver's stats
    const updateResult = await DataBase.ZiUser.findOneAndUpdate(
        { 
            userID: userId,
            $or: [
                { lastCookie: { $lt: cooldownThreshold } },
                { lastCookie: { $exists: false } }
            ]
        },
        {
            $inc: { 
                cookiesGiven: 1,
                coin: zigoldBonus
            },
            $set: { lastCookie: now },
            $setOnInsert: {
                userID: userId,
                name: userName,
                xp: 1,
                level: 1,
                cookiesReceived: 0
            }
        },
        { upsert: true, new: true }
    );
    
    // If no document was modified, user is on cooldown
    if (!updateResult) {
        // Get current user data to calculate remaining cooldown
        const userDB = await DataBase.ZiUser.findOne({ userID: userId });
        const timeDiff = now.getTime() - new Date(userDB.lastCookie).getTime();
        const timeLeft = COOKIE_COOLDOWN - timeDiff;
        const secondsLeft = Math.ceil(timeLeft / 1000);
        
        const cooldownEmbed = new EmbedBuilder()
            .setTitle(`‚è∞ ${cookieEmoji} Cookie Cooldown`)
            .setColor("#FF6B9D")
            .setDescription(`**${userName}**, b·∫°n ƒë√£ t·∫∑ng cookie g·∫ßn ƒë√¢y!\n\nüïê H√£y ƒë·ª£i **${secondsLeft} gi√¢y** ƒë·ªÉ t·∫∑ng cookie ti·∫øp theo.`)
            .setFooter({ 
                text: "L√†m cookie c·∫ßn th·ªùi gian!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [cooldownEmbed], ephemeral: true });
    }

    // Update receiver's stats
    await DataBase.ZiUser.findOneAndUpdate(
        { userID: targetId },
        {
            $inc: { cookiesReceived: 1 },
            $setOnInsert: {
                userID: targetId,
                name: targetName,
                xp: 1,
                level: 1,
                coin: 0,
                cookiesGiven: 0
            }
        },
        { upsert: true }
    );

    // Apply XP bonus through ZiRank
    await ZiRank.execute({ 
        user: interaction.user, 
        XpADD: xpBonus,
        CoinADD: 0 // We already handled coins above
    });

    // Choose random message
    const messages = isSpecialCookie ? SPECIAL_COOKIE_MESSAGES : COOKIE_MESSAGES;
    const randomMessage = messages[Math.floor(Math.random() * messages.length)];

    // Create success embed
    const cookieEmbed = new EmbedBuilder()
        .setTitle(`${cookieEmoji} ${isSpecialCookie ? '‚ú® Special Cookie! ‚ú®' : 'Cookie Delivered!'} ${giftEmoji}`)
        .setColor(isSpecialCookie ? "#FFD700" : "#8B4513")
        .setDescription(`**${userName}** ${randomMessage}\n\n${targetUser} ${heartEmoji}`)
        .addFields(
            {
                name: `${giftEmoji} Giver Rewards`,
                value: `${zigoldEmoji} **+${zigoldBonus}** ZiGold\n${starEmoji} **+${xpBonus}** XP`,
                inline: true
            },
            {
                name: `${cookieEmoji} Cookie Count`,
                value: `**Given:** ${updateResult.cookiesGiven}\n**Received:** ${updateResult.cookiesReceived || 0}`,
                inline: true
            }
        )
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: `${isSpecialCookie ? 'üåü Special cookie bonus!' : 'üíñ Spread the love with cookies!'} ‚Ä¢ ID:${cookieId} ‚Ä¢ ZiBot`,
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    if (isSpecialCookie) {
        cookieEmbed.setImage("https://media.giphy.com/media/3o7aD2saalBwwftBIY/giphy.gif"); // Optional: cookie gif
    }

    // Create button for receiver to thank (only for receiver)
    const thankButton = new ButtonBuilder()
        .setCustomId("thank_cookie")
        .setLabel("üôè C·∫£m ∆°n!")
        .setStyle(ButtonStyle.Primary);

    const actionRow = new ActionRowBuilder().addComponents(thankButton);

    // Send public cookie message WITH button in guild
    await interaction.reply({ 
        embeds: [cookieEmbed],
        components: [actionRow]
    });

    // Try to send DM to receiver with thanks button
    try {
        const dmEmbed = new EmbedBuilder()
            .setTitle(`${cookieEmoji} B·∫°n nh·∫≠n ƒë∆∞·ª£c cookie! ${giftEmoji}`)
            .setColor("#8B4513")
            .setDescription(`**${userName}** ${randomMessage}`)
            .addFields(
                {
                    name: `${sparkleEmoji} Cookie Message`,
                    value: `"${heartEmoji} Enjoy your delicious cookie! ${heartEmoji}"`,
                    inline: false
                },
                {
                    name: `${giftEmoji} L√†m g√¨ ti·∫øp theo?`,
                    value: `H√£y th∆∞·ªüng th·ª©c cookie ngon l√†nh c·ªßa b·∫°n! ${heartEmoji}`,
                    inline: false
                }
            )
            .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
            .setFooter({ 
                text: `ID:${cookieId} ‚Ä¢ ZiBot Cookie Delivery Service`,
                iconURL: interaction.client.user.displayAvatarURL() 
            })
            .setTimestamp();

        await targetUser.send({ 
            embeds: [dmEmbed]
            // Removed components (button) from DM as requested
        });
        console.log(`Successfully sent cookie notification DM to ${targetUser.username}`);
    } catch (dmError) {
        console.log(`Could not DM cookie notification to ${targetUser.username}: ${dmError.message}`);
        console.log(`Note: ${targetUser.username} won't be able to thank for this cookie as DMs are disabled`);
    }
}

async function showCookieStats(interaction, DataBase) {
    const userId = interaction.user.id;
    const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

    const userDB = await DataBase.ZiUser.findOne({ userID: userId });
    const cookiesGiven = userDB?.cookiesGiven || 0;
    const cookiesReceived = userDB?.cookiesReceived || 0;
    const totalCookies = cookiesGiven + cookiesReceived;

    // Calculate cookie rank
    let cookieRank = "ü•â Cookie Newbie";
    let rankDescription = "B·∫°n m·ªõi b·∫Øt ƒë·∫ßu h√†nh tr√¨nh cookie!";
    
    if (totalCookies >= 100) {
        cookieRank = "üèÜ Cookie Master";
        rankDescription = "B·∫°n l√† b·∫≠c th·∫ßy v·ªÅ cookie!";
    } else if (totalCookies >= 50) {
        cookieRank = "ü•á Cookie Expert";
        rankDescription = "B·∫°n l√† chuy√™n gia cookie!";
    } else if (totalCookies >= 25) {
        cookieRank = "ü•à Cookie Enthusiast";
        rankDescription = "B·∫°n r·∫•t y√™u th√≠ch cookie!";
    } else if (totalCookies >= 10) {
        cookieRank = "üç™ Cookie Lover";
        rankDescription = "B·∫°n ƒëang say m√™ cookie!";
    }

    const statsEmbed = new EmbedBuilder()
        .setTitle(`${cookieEmoji} Cookie Stats c·ªßa ${userName}`)
        .setColor("#8B4513")
        .setDescription(`${sparkleEmoji} ${rankDescription}\n\n**T·ªïng Cookie Activity:** ${totalCookies}`)
        .addFields(
            {
                name: `${giftEmoji} Cookies ƒê√£ T·∫∑ng`,
                value: `**${cookiesGiven}** cookies`,
                inline: true
            },
            {
                name: `${heartEmoji} Cookies ƒê√£ Nh·∫≠n`,
                value: `**${cookiesReceived}** cookies`,
                inline: true
            },
            {
                name: `${starEmoji} Cookie Rank`,
                value: cookieRank,
                inline: true
            }
        )
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: `üí° S·ª≠ d·ª•ng /cookie @user ƒë·ªÉ t·∫∑ng cookie! ‚Ä¢ ZiBot Cookie System`,
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    // Add motivational message based on stats
    if (cookiesGiven === 0) {
        statsEmbed.addFields({
            name: `${sparkleEmoji} Tip`,
            value: `H√£y t·∫∑ng cookie ƒë·∫ßu ti√™n cho ai ƒë√≥ ƒë·ªÉ nh·∫≠n ${zigoldEmoji} ZiGold v√† ${starEmoji} XP!`,
            inline: false
        });
    } else if (cookiesGiven < 5) {
        statsEmbed.addFields({
            name: `${sparkleEmoji} Keep Going!`,
            value: `Tuy·ªát v·ªùi! H√£y ti·∫øp t·ª•c chia s·∫ª y√™u th∆∞∆°ng qua cookies!`,
            inline: false
        });
    }

    await interaction.reply({ embeds: [statsEmbed] });
}

async function handleCommandError(interaction, error) {
    console.error("Cookie command error:", error);
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói")
        .setColor("#FF0000")
        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh cookie. Vui l√≤ng th·ª≠ l·∫°i!");
    
    if (interaction.replied || interaction.deferred) {
        return await interaction.editReply({ embeds: [errorEmbed] });
    } else {
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
}