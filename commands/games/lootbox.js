const { EmbedBuilder } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");
const lootboxUtil = require("../../utils/lootboxUtil.js");

const blank = '‚¨ú'; // Bi·ªÉu t∆∞·ª£ng kho·∫£ng tr·ªëng
const normalBox = 'üì¶'; // Bi·ªÉu t∆∞·ª£ng lootbox th∆∞·ªùng
const boxShake = 'üéÅ'; // Bi·ªÉu t∆∞·ª£ng h·ªôp l·∫Øc (ƒë·ªông h√¨nh trong Discord v·ªõi emoji t√πy ch·ªânh)
const boxOpen = '‚ú®'; // Bi·ªÉu t∆∞·ª£ng h·ªôp ƒë√£ m·ªü
const fabledBox = 'üåü'; // Bi·ªÉu t∆∞·ª£ng lootbox huy·ªÅn tho·∫°i
const fboxShake = 'üí´'; // H·ªôp huy·ªÅn tho·∫°i l·∫Øc
const fboxOpen = 'üéÜ'; // H·ªôp huy·ªÅn tho·∫°i ƒë√£ m·ªü

const maxBoxes = 100;
const zigoldEmoji = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold
const gemEmoji = "üíé"; // Bi·ªÉu t∆∞·ª£ng ƒë√° qu√Ω

module.exports.data = {
    name: "lootbox",
    description: "M·ªü lootbox ƒë·ªÉ nh·∫≠n rewards ng·∫´u nhi√™n! Ki·ªÉm tra inventory b·∫±ng /zigold",
    type: 1,
    options: [
        {
            type: 3,
            name: "count",
            description: "S·ªë l∆∞·ª£ng lootbox ho·∫∑c lo·∫°i: [s·ªë, 'all', 'fabled']",
            required: false,
        },
    ],
    integration_types: [0, 1], // ·ª®ng d·ª•ng m√°y ch·ªß + ·ª®ng d·ª•ng ng∆∞·ªùi d√πng  
    contexts: [0, 1, 2], // M√°y ch·ªß + Tin nh·∫Øn ri√™ng + K√™nh ri√™ng t∆∞
    dm_permission: true,
    nsfw: false,
};

/**
 * @param { object } command - object command
 * @param { import("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import("../../lang/vi.js") } command.lang - language
 */
module.exports.execute = async ({ interaction, lang }) => {
    try {
        const ZiRank = useFunctions().get("ZiRank");
        const DataBase = useDB();

        // Ki·ªÉm tra xem c∆° s·ªü d·ªØ li·ªáu v√† c√°c h√†m ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch
        if (!DataBase || !DataBase.ZiUser || !ZiRank) {
            return await handleInitializationError(interaction, !DataBase);
        }

        const countOption = interaction.options.getString("count");
        
        if (countOption && !isNaN(parseInt(countOption))) {
            // M·ªü s·ªë l∆∞·ª£ng h·ªôp c·ª• th·ªÉ
            await openMultiple(interaction, parseInt(countOption), DataBase, ZiRank);
        } else if (countOption && countOption.toLowerCase() === 'all') {
            // M·ªü t·∫•t c·∫£ c√°c h·ªôp
            await openAllBoxes(interaction, DataBase, ZiRank);
        } else if (countOption && ['f', 'fabled'].includes(countOption.toLowerCase())) {
            // M·ªü h·ªôp huy·ªÅn tho·∫°i
            await openFabledBox(interaction, DataBase, ZiRank);
        } else {
            // M·ªü m·ªôt h·ªôp duy nh·∫•t
            await openBox(interaction, DataBase, ZiRank);
        }

    } catch (error) {
        console.error("Error in lootbox command:", error);
        await handleCommandError(interaction, error);
    }
};

async function handleInitializationError(interaction, isDatabaseError) {
    const errorEmbed = new EmbedBuilder()
        .setTitle(`‚ö†Ô∏è ‚ú® Kh·ªüi t·∫°o h·ªá th·ªëng`)
        .setColor("#FFD700")
        .setDescription(
            isDatabaseError 
            ? `üîÑ **Database ƒëang kh·ªüi t·∫°o...**\n\n‚ú® Vui l√≤ng ƒë·ª£i v√†i gi√¢y r·ªìi th·ª≠ l·∫°i!`
            : `üîÑ **H·ªá th·ªëng ZiRank ƒëang kh·ªüi t·∫°o...**\n\n‚ú® Vui l√≤ng ƒë·ª£i v√†i gi√¢y r·ªìi th·ª≠ l·∫°i!`
        )
        .setFooter({ 
            text: "H·ªá th·ªëng s·∫Ω s·∫µn s√†ng trong gi√¢y l√°t!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();
    
    return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
}

async function openBox(interaction, DataBase, ZiRank) {
    const userId = interaction.user.id;
    const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

    // Check if user has lootboxes
    const userDB = await DataBase.ZiUser.findOne({ userID: userId });
    
    if (!userDB || (userDB.lootboxes || 0) <= 0) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng c√≥ lootbox!")
            .setColor("#FF4757")
            .setDescription(`**${userName}**, b·∫°n kh√¥ng c√≥ lootbox n√†o!\n\nüéØ H√£y hunt animals ƒë·ªÉ c√≥ c∆° h·ªôi nh·∫≠n lootbox!`)
            .setFooter({ 
                text: "S·ª≠ d·ª•ng /hunt ƒë·ªÉ c√≥ c∆° h·ªôi nh·∫≠n lootbox!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Deduct one lootbox
    const updateResult = await DataBase.ZiUser.findOneAndUpdate(
        { userID: userId, lootboxes: { $gt: 0 } },
        { $inc: { lootboxes: -1 } },
        { new: true }
    );

    if (!updateResult) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng th·ªÉ m·ªü lootbox!")
            .setColor("#FF4757")
            .setDescription("C√≥ l·ªói x·∫£y ra khi m·ªü lootbox. Vui l√≤ng th·ª≠ l·∫°i!");
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Generate random reward
    const reward = lootboxUtil.generateRandomReward(1);
    const firstReward = reward.rewards[0];

    // Apply rewards to user
    await applyRewards(DataBase, ZiRank, userId, reward, interaction.user);

    // Create animated messages
    const text1 = `${blank} **| ${userName}** m·ªü m·ªôt lootbox\n${boxShake} **|** v√† t√¨m th·∫•y...`;
    const text2 = `${firstReward.emoji} **| ${userName}** m·ªü m·ªôt lootbox\n${boxOpen} **|** v√† t√¨m th·∫•y **${firstReward.displayName}**!\n\nüí∞ **Reward:** +${firstReward.zigoldReward.toLocaleString()} ${zigoldEmoji} ZiGold`;

    await interaction.reply(text1);
    setTimeout(async () => {
        try {
            await interaction.editReply(text2);
        } catch (error) {
            console.error("Error editing lootbox message:", error);
        }
    }, 3000);
}

async function openMultiple(interaction, count, DataBase, ZiRank) {
    if (count > maxBoxes) count = maxBoxes;
    if (count <= 0) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!")
            .setColor("#FF4757")
            .setDescription("B·∫°n c·∫ßn m·ªü √≠t nh·∫•t 1 lootbox!");
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    const userId = interaction.user.id;
    const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

    // Check if user has enough lootboxes
    const userDB = await DataBase.ZiUser.findOne({ userID: userId });
    
    if (!userDB || (userDB.lootboxes || 0) < count) {
        const availableBoxes = userDB?.lootboxes || 0;
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng ƒë·ªß lootbox!")
            .setColor("#FF4757")
            .setDescription(`**${userName}**, b·∫°n ch·ªâ c√≥ **${availableBoxes}** lootbox!\n\nB·∫°n c·∫ßn **${count}** lootbox ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.`)
            .setFooter({ 
                text: "S·ª≠ d·ª•ng /hunt ƒë·ªÉ c√≥ c∆° h·ªôi nh·∫≠n th√™m lootbox!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Deduct lootboxes
    const updateResult = await DataBase.ZiUser.findOneAndUpdate(
        { userID: userId, lootboxes: { $gte: count } },
        { $inc: { lootboxes: -count } },
        { new: true }
    );

    if (!updateResult) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng th·ªÉ m·ªü lootbox!")
            .setColor("#FF4757")
            .setDescription("C√≥ l·ªói x·∫£y ra khi m·ªü lootbox. Vui l√≤ng th·ª≠ l·∫°i!");
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Generate multiple rewards
    const reward = lootboxUtil.generateRandomReward(count);

    // Apply rewards to user
    await applyRewards(DataBase, ZiRank, userId, reward, interaction.user);

    // Create reward text
    let rewardText = '';
    let totalZigold = 0;
    
    for (const rewardItem of reward.rewards) {
        rewardText += `${rewardItem.emoji}${rewardItem.count > 1 ? rewardItem.count : ''} `;
        totalZigold += rewardItem.zigoldReward * rewardItem.count;
    }

    const text1 = `${blank} **| ${userName}** m·ªü ${count} lootboxes\n${boxShake} **|** v√† t√¨m th·∫•y...`;
    const text2 = `${blank} **| ${userName}** m·ªü ${count} lootboxes\n${boxOpen} **|** v√† t√¨m th·∫•y: ${rewardText}\n\nüí∞ **T·ªïng ZiGold:** +${totalZigold.toLocaleString()} ${zigoldEmoji}`;

    await interaction.reply(text1);
    setTimeout(async () => {
        try {
            await interaction.editReply(text2);
        } catch (error) {
            console.error("Error editing multiple lootbox message:", error);
        }
    }, 3000);
}

async function openAllBoxes(interaction, DataBase, ZiRank) {
    const userId = interaction.user.id;
    
    const userDB = await DataBase.ZiUser.findOne({ userID: userId });
    if (!userDB || (userDB.lootboxes || 0) <= 0) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng c√≥ lootbox!")
            .setColor("#FF4757")
            .setDescription("B·∫°n kh√¥ng c√≥ lootbox n√†o ƒë·ªÉ m·ªü!");
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    let boxcount = userDB.lootboxes;
    if (boxcount > maxBoxes) boxcount = maxBoxes;

    await openMultiple(interaction, boxcount, DataBase, ZiRank);
}

async function openFabledBox(interaction, DataBase, ZiRank) {
    const userId = interaction.user.id;
    const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

    // Check if user has fabled lootboxes
    const userDB = await DataBase.ZiUser.findOne({ userID: userId });
    
    if (!userDB || (userDB.fabledLootboxes || 0) <= 0) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng c√≥ Fabled lootbox!")
            .setColor("#FF4757")
            .setDescription(`**${userName}**, b·∫°n kh√¥ng c√≥ Fabled lootbox n√†o!\n\n${fabledBox} Fabled lootbox l√† ph·∫ßn th∆∞·ªüng ƒë·∫∑c bi·ªát r·∫•t hi·∫øm!`)
            .setFooter({ 
                text: "Fabled lootbox ch·ªâ c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c t·ª´ c√°c event ƒë·∫∑c bi·ªát!", 
                iconURL: interaction.client.user.displayAvatarURL() 
            });
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Deduct one fabled lootbox
    const updateResult = await DataBase.ZiUser.findOneAndUpdate(
        { userID: userId, fabledLootboxes: { $gt: 0 } },
        { $inc: { fabledLootboxes: -1 } },
        { new: true }
    );

    if (!updateResult) {
        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng th·ªÉ m·ªü Fabled lootbox!")
            .setColor("#FF4757")
            .setDescription("C√≥ l·ªói x·∫£y ra khi m·ªü Fabled lootbox. Vui l√≤ng th·ª≠ l·∫°i!");
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }

    // Generate fabled reward (higher tier)
    const reward = lootboxUtil.generateFabledReward(1);
    const firstReward = reward.rewards[0];

    // Apply rewards to user
    await applyRewards(DataBase, ZiRank, userId, reward, interaction.user);

    // Create animated messages for fabled box
    const text1 = `${blank} **| ${userName}** m·ªü m·ªôt Fabled lootbox\n${fboxShake} **|** v√† t√¨m th·∫•y...`;
    const text2 = `${firstReward.emoji} **| ${userName}** m·ªü m·ªôt Fabled lootbox\n${fboxOpen} **|** v√† t√¨m th·∫•y **${firstReward.displayName}**!\n\nüí∞ **Reward:** +${firstReward.zigoldReward.toLocaleString()} ${zigoldEmoji} ZiGold\n‚ú® **XP:** +${firstReward.xpReward || 0}`;

    await interaction.reply(text1);
    setTimeout(async () => {
        try {
            await interaction.editReply(text2);
        } catch (error) {
            console.error("Error editing fabled lootbox message:", error);
        }
    }, 3000);
}

async function applyRewards(DataBase, ZiRank, userId, reward, user) {
    // Calculate total ZiGold and XP rewards
    let totalZigold = 0;
    let totalXP = 0;

    for (const rewardItem of reward.rewards) {
        totalZigold += rewardItem.zigoldReward * rewardItem.count;
        totalXP += (rewardItem.xpReward || 0) * rewardItem.count;
    }

    // Apply ZiGold rewards directly to database
    await DataBase.ZiUser.findOneAndUpdate(
        { userID: userId },
        { $inc: { coin: totalZigold } },
        { upsert: true }
    );

    // Apply XP rewards through ZiRank system
    if (totalXP > 0) {
        await ZiRank.execute({ 
            user: user, 
            XpADD: totalXP,
            CoinADD: 0 // We already handled coins above
        });
    }
}

async function handleCommandError(interaction, error) {
    console.error("Lootbox command error:", error);
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói")
        .setColor("#FF0000")
        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
    
    if (interaction.replied || interaction.deferred) {
        return await interaction.editReply({ embeds: [errorEmbed] });
    } else {
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
}