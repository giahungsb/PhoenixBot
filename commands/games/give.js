const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");
const animals = require("../../data/animals.json");

const GIVE_COOLDOWN = 30 * 1000; // 30 gi√¢y gi·ªØa c√°c l·∫ßn t·∫∑ng
const MAX_GIVE_PER_DAY = 10; // T·ªëi ƒëa 10 l·∫ßn t·∫∑ng m·ªói ng√†y

const giveEmoji = "üéÅ"; // Bi·ªÉu t∆∞·ª£ng t·∫∑ng
const zigoldEmoji = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold
const sparkleEmoji = "‚ú®"; // Bi·ªÉu t∆∞·ª£ng l·∫•p l√°nh
const heartEmoji = "üíñ"; // Bi·ªÉu t∆∞·ª£ng tr√°i tim
const petEmoji = "üêæ"; // Bi·ªÉu t∆∞·ª£ng th√∫ c∆∞ng
const clockEmoji = "‚è∞"; // Bi·ªÉu t∆∞·ª£ng ƒë·ªìng h·ªì
const arrowEmoji = "‚û°Ô∏è"; // Bi·ªÉu t∆∞·ª£ng m≈©i t√™n

module.exports.data = {
    name: "giveanimal", 
    description: "T·∫∑ng animals cho ng∆∞·ªùi kh√°c t·ª´ collection c·ªßa b·∫°n!",
    type: 1,
    options: [
        {
            type: 6,
            name: "user",
            description: "Ng∆∞·ªùi nh·∫≠n",
            required: true,
        },
        {
            type: 3,
            name: "animal",
            description: "T√™n animal mu·ªën t·∫∑ng",
            required: true,
        },
        {
            type: 4,
            name: "amount",
            description: "S·ªë l∆∞·ª£ng mu·ªën t·∫∑ng",
            required: false,
            min_value: 1,
            max_value: 10
        }
    ],
    integration_types: [0, 1], // ·ª®ng d·ª•ng m√°y ch·ªß + ·ª®ng d·ª•ng ng∆∞·ªùi d√πng  
    contexts: [0, 1, 2], // M√°y ch·ªß + Tin nh·∫Øn ri√™ng + K√™nh ri√™ng t∆∞
    dm_permission: true,
    nsfw: false,
};

module.exports.execute = async ({ interaction, lang }) => {
    try {
        const ZiRank = useFunctions().get("ZiRank");
        const DataBase = useDB();

        // Ki·ªÉm tra xem c∆° s·ªü d·ªØ li·ªáu v√† c√°c h√†m ƒë∆∞·ª£c kh·ªüi t·∫°o ƒë√∫ng c√°ch
        if (!DataBase || !DataBase.ZiUser || !ZiRank) {
            return await handleInitializationError(interaction, !DataBase);
        }

        const giverId = interaction.user.id;
        const receiverUser = interaction.options.getUser("user");
        const animalName = interaction.options.getString("animal").toLowerCase();
        const amount = interaction.options.getInteger("amount") || 1;
        const currentTime = new Date();

        // Ki·ªÉm tra x√°c th·ª±c
        if (receiverUser.id === giverId) {
            return await showSelfGiveError(interaction);
        }

        if (receiverUser.bot) {
            return await showBotGiveError(interaction);
        }

        // L·∫•y d·ªØ li·ªáu c·ªßa c·∫£ hai ng∆∞·ªùi d√πng
        const [giverDB, receiverDB] = await Promise.all([
            DataBase.ZiUser.findOne({ userID: giverId }),
            DataBase.ZiUser.findOne({ userID: receiverUser.id })
        ]);

        if (!giverDB || !giverDB.huntStats || Object.keys(giverDB.huntStats).length === 0) {
            return await showNoAnimalsError(interaction);
        }

        // Check daily give limit
        const today = new Date().toDateString();
        const lastGiveDate = giverDB.lastGive ? new Date(giverDB.lastGive).toDateString() : null;
        const dailyGives = lastGiveDate === today ? (giverDB.dailyGives || 0) : 0;

        if (dailyGives >= MAX_GIVE_PER_DAY) {
            return await showDailyLimitError(interaction);
        }

        // Check cooldown
        const lastGive = giverDB.lastGive ? new Date(giverDB.lastGive) : null;
        if (lastGive && (currentTime - lastGive) < GIVE_COOLDOWN) {
            const secondsLeft = Math.ceil((GIVE_COOLDOWN - (currentTime - lastGive)) / 1000);
            return await showGiveCooldown(interaction, secondsLeft);
        }

        // Find the animal in giver's collection
        const animalInfo = findAnimalInCollection(giverDB.huntStats, animalName);
        if (!animalInfo) {
            return await showAnimalNotFoundError(interaction, animalName);
        }

        if (animalInfo.count < amount) {
            return await showInsufficientAnimalsError(interaction, animalInfo, amount);
        }

        // Show confirmation
        await showGiveConfirmation(interaction, receiverUser, animalInfo, amount);

    } catch (error) {
        console.error("Error in give command:", error);
        await handleCommandError(interaction, error);
    }
};

function findAnimalInCollection(huntStats, animalName) {
    for (const [rarity, animalData] of Object.entries(huntStats)) {
        if (animals[rarity]) {
            for (const [storedAnimalName, data] of Object.entries(animalData)) {
                if (storedAnimalName.toLowerCase() === animalName && data && data.count > 0) {
                    const animalInfo = animals[rarity].find(a => a.name === storedAnimalName);
                    if (animalInfo) {
                        return {
                            ...animalInfo,
                            rarity: rarity,
                            count: data.count,
                            storedName: storedAnimalName
                        };
                    }
                }
            }
        }
    }
    return null;
}

async function showSelfGiveError(interaction) {
    const embed = new EmbedBuilder()
        .setTitle(`${giveEmoji} Kh√¥ng th·ªÉ t·ª± t·∫∑ng`)
        .setColor("#FF6B6B")
        .setDescription(`ü§î **B·∫°n kh√¥ng th·ªÉ t·∫∑ng animal cho ch√≠nh m√¨nh!**\n\n${sparkleEmoji} H√£y t·∫∑ng cho b·∫°n b√® ƒë·ªÉ chia s·∫ª ni·ªÅm vui!`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "S·ª≠ d·ª•ng /give @friend [animal] ƒë·ªÉ t·∫∑ng cho b·∫°n b√®!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showBotGiveError(interaction) {
    const embed = new EmbedBuilder()
        .setTitle(`${giveEmoji} Kh√¥ng th·ªÉ t·∫∑ng cho Bot`)
        .setColor("#FF6B6B")
        .setDescription(`ü§ñ **Bot kh√¥ng c·∫ßn animals!**\n\n${sparkleEmoji} H√£y t·∫∑ng cho ng∆∞·ªùi th·∫≠t ƒë·ªÉ h·ªç c·∫£m th·∫•y vui v·∫ª!`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "Ch·ªâ c√≥ th·ªÉ t·∫∑ng cho ng∆∞·ªùi d√πng th·∫≠t!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showNoAnimalsError(interaction) {
    const embed = new EmbedBuilder()
        .setTitle(`${petEmoji} Kh√¥ng c√≥ animals`)
        .setColor("#FF6B6B")
        .setDescription(`üîç **B·∫°n ch∆∞a c√≥ animals n√†o ƒë·ªÉ t·∫∑ng!**\n\nüèπ H√£y d√πng l·ªánh \`\`\`text\n/hunt\n\`\`\` ƒë·ªÉ b·∫Øt animals tr∆∞·ªõc!\n\n${sparkleEmoji} Sau khi c√≥ animals, b·∫°n c√≥ th·ªÉ t·∫∑ng cho b·∫°n b√®!`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "S·ª≠ d·ª•ng /hunt ƒë·ªÉ b·∫Øt ƒë·∫ßu collection c·ªßa b·∫°n!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showDailyLimitError(interaction) {
    const embed = new EmbedBuilder()
        .setTitle(`${clockEmoji} ƒê√£ ƒë·∫°t gi·ªõi h·∫°n`)
        .setColor("#FFD700")
        .setDescription(`‚è≥ **B·∫°n ƒë√£ t·∫∑ng t·ªëi ƒëa ${MAX_GIVE_PER_DAY} animals h√¥m nay!**\n\nüåÖ H√£y quay l·∫°i v√†o ng√†y mai ƒë·ªÉ ti·∫øp t·ª•c t·∫∑ng!\n\nüí° Gi·ªõi h·∫°n n√†y gi√∫p duy tr√¨ c√¢n b·∫±ng game.`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: `Gi·ªõi h·∫°n: ${MAX_GIVE_PER_DAY} l·∫ßn/ng√†y ‚Ä¢ Reset l√∫c 00:00`, 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showGiveCooldown(interaction, secondsLeft) {
    const embed = new EmbedBuilder()
        .setTitle(`${clockEmoji} Give Cooldown`)
        .setColor("#FFD700")
        .setDescription(`‚è≥ **Vui l√≤ng ƒë·ª£i tr∆∞·ªõc khi t·∫∑ng ti·∫øp!**\n\n${clockEmoji} **Th·ªùi gian c√≤n l·∫°i:** ${secondsLeft} gi√¢y\n\nüí° Cooldown ngƒÉn spam v√† b·∫£o v·ªá economy.`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: `Quay l·∫°i sau ${secondsLeft} gi√¢y!`, 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showAnimalNotFoundError(interaction, animalName) {
    const embed = new EmbedBuilder()
        .setTitle(`${petEmoji} Animal kh√¥ng t√¨m th·∫•y`)
        .setColor("#FF6B6B")
        .setDescription(`üîç **Kh√¥ng t√¨m th·∫•y animal "${animalName}" trong collection c·ªßa b·∫°n!**\n\nüí° **G·ª£i √Ω:**\n‚Ä¢ Ki·ªÉm tra ch√≠nh t·∫£ t√™n animal\n‚Ä¢ D√πng \`/zoo\` ƒë·ªÉ xem collection\n‚Ä¢ Ch·ªâ c√≥ th·ªÉ t·∫∑ng animals b·∫°n ƒë√£ s·ªü h·ªØu`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "S·ª≠ d·ª•ng /zoo ƒë·ªÉ xem collection c·ªßa b·∫°n!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showInsufficientAnimalsError(interaction, animalInfo, requestedAmount) {
    const embed = new EmbedBuilder()
        .setTitle(`${petEmoji} Kh√¥ng ƒë·ªß animals`)
        .setColor("#FF6B6B")
        .setDescription(`üí∏ **B·∫°n kh√¥ng c√≥ ƒë·ªß ${animalInfo.emoji} ${animalInfo.name}!**\n\n**Hi·ªán c√≥:** ${animalInfo.count}\n**Mu·ªën t·∫∑ng:** ${requestedAmount}\n**Thi·∫øu:** ${requestedAmount - animalInfo.count}\n\nüèπ H√£y ƒëi sƒÉn th√™m ƒë·ªÉ c√≥ nhi·ªÅu animals h∆°n!`)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "S·ª≠ d·ª•ng /hunt ƒë·ªÉ b·∫Øt th√™m animals!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.reply({ embeds: [embed] });
}

async function showGiveConfirmation(interaction, receiverUser, animalInfo, amount) {
    const totalValue = animalInfo.value * amount;
    const rarityEmojis = {
        'common': '‚ö™',
        'uncommon': 'üü¢', 
        'rare': 'üîµ',
        'epic': 'üü£',
        'legendary': 'üü°'
    };

    const embed = new EmbedBuilder()
        .setTitle(`${giveEmoji} X√°c nh·∫≠n t·∫∑ng Animal`)
        .setColor("#FFD700")
        .setDescription(`${sparkleEmoji} **B·∫°n c√≥ ch·∫Øc mu·ªën t·∫∑ng?**\n\n${arrowEmoji} **T·ª´:** ${interaction.user}\n${arrowEmoji} **ƒê·∫øn:** ${receiverUser}\n\n${animalInfo.emoji} **Animal:** ${animalInfo.name}\n${rarityEmojis[animalInfo.rarity]} **Rarity:** ${animalInfo.rarity}\nüìä **S·ªë l∆∞·ª£ng:** ${amount}\nüí∞ **T·ªïng gi√° tr·ªã:** ${totalValue.toLocaleString()} ZiGold\n\n‚ö†Ô∏è **L∆∞u √Ω:** H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!`)
        .setThumbnail(receiverUser.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: "Nh·∫•n Confirm ƒë·ªÉ t·∫∑ng ho·∫∑c Cancel ƒë·ªÉ h·ªßy b·ªè", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`confirm_give:${interaction.user.id}:${receiverUser.id}:${animalInfo.storedName}:${amount}:${Date.now()}`)
                .setLabel('Confirm Give')
                .setStyle(ButtonStyle.Success)
                .setEmoji(giveEmoji),
            new ButtonBuilder()
                .setCustomId(`cancel_give:${interaction.user.id}:${Date.now()}`)
                .setLabel('Cancel')
                .setStyle(ButtonStyle.Secondary)
                .setEmoji('‚ùå')
        );

    await interaction.reply({ embeds: [embed], components: [row] });
}

async function handleInitializationError(interaction, isDatabaseError) {
    const errorEmbed = new EmbedBuilder()
        .setTitle(`‚ö†Ô∏è ${sparkleEmoji} Kh·ªüi t·∫°o h·ªá th·ªëng`)
        .setColor("#FFD700")
        .setDescription(
            isDatabaseError 
                ? "üîÑ **ƒêang kh·ªüi t·∫°o database...**\n\n‚è≥ Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t v√† th·ª≠ l·∫°i!"
                : "üîÑ **ƒêang kh·ªüi t·∫°o functions...**\n\n‚è≥ Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t v√† th·ª≠ l·∫°i!"
        )
        .setThumbnail(interaction.client.user.displayAvatarURL({ size: 1024 }))
        .setFooter({ 
            text: "H·ªá th·ªëng ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    if (interaction.replied || interaction.deferred) {
        return await interaction.editReply({ embeds: [errorEmbed] });
    } else {
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
}

async function handleCommandError(interaction, error) {
    console.error("Give command error:", error);
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói")
        .setColor("#FF0000")
        .setDescription("C√≥ l·ªói x·∫£y ra khi t·∫∑ng animal. Vui l√≤ng th·ª≠ l·∫°i!");
    
    if (interaction.replied || interaction.deferred) {
        return await interaction.editReply({ embeds: [errorEmbed] });
    } else {
        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
}