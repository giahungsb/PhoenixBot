const { EmbedBuilder } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");
const { updateQuestProgress } = require("./quests");

const maxBet = 250000;
const zigold = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold
const spin = "üîÑ"; // Bi·ªÉu t∆∞·ª£ng quay cho ho·∫°t h√¨nh
const heads = "üü¶"; // H√¨nh vu√¥ng xanh cho m·∫∑t ng·ª≠a
const tails = "üü•"; // H√¨nh vu√¥ng ƒë·ªè cho m·∫∑t s·∫•p

module.exports.data = {
        name: "coinflip",
        description: "Tr√≤ ch∆°i tung ƒë·ªìng xu v·ªõi h·ªá th·ªëng c∆∞·ª£c",
        type: 1,
        options: [
                {
                        name: "side",
                        description: "Ch·ªçn m·∫∑t ƒë·ªìng xu",
                        type: 3,
                        required: true,
                        choices: [
                                { name: "Ng·ª≠a (Heads)", value: "heads" },
                                { name: "S·∫•p (Tails)", value: "tails" },
                        ],
                },
                {
                        name: "bet",
                        description: "S·ªë ti·ªÅn c∆∞·ª£c (m·∫∑c ƒë·ªãnh: 100)",
                        type: 4,
                        required: false,
                        min_value: 1,
                        max_value: maxBet,
                },
        ],
        integration_types: [0],
        contexts: [0, 1],
};

/**
 * @param { object } command - object command
 * @param { import("discord.js").CommandInteraction } command.interaction - interaction
 * @param { import("../../lang/vi.js") } command.lang - language
 */
module.exports.execute = async ({ interaction, lang }) => {
        const DataBase = useDB();
        const choice = interaction.options.getString("side");
        let bet = interaction.options.getInteger("bet") || 100;
        const words = lang?.Coinflip ?? {};
        const userName = interaction.member?.displayName ?? interaction.user.globalName ?? interaction.user.username;

        // X√°c th·ª±c s·ªë ti·ªÅn c∆∞·ª£c
        if (bet <= 0) {
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói")
                        .setColor("#FF0000")
                        .setDescription("B·∫°n kh√¥ng th·ªÉ c∆∞·ª£c s·ªë ti·ªÅn <= 0!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        if (bet > maxBet) {
                bet = maxBet;
        }

        // Ki·ªÉm tra t√¨nh tr·∫°ng c∆° s·ªü d·ªØ li·ªáu
        if (!DataBase) {
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói Database")
                        .setColor("#FF0000")
                        .setDescription("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database. Vui l√≤ng th·ª≠ l·∫°i sau!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }

        try {
                // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒë·ªß ZiGold kh√¥ng
                const userDB = await DataBase.ZiUser.findOne({ userID: interaction.user.id });
                const userBalance = userDB?.coin || 0;

                if (userBalance < bet) {
                        const errorEmbed = new EmbedBuilder()
                                .setTitle("‚ùå Kh√¥ng ƒë·ªß ZiGold")
                                .setColor("#FF0000")
                                .setDescription(
                                        `B·∫°n kh√¥ng c√≥ ƒë·ªß ZiGold ƒë·ªÉ c∆∞·ª£c! B·∫°n c√≥ **${userBalance.toLocaleString()} ZiGold** nh∆∞ng c·∫ßn **${bet.toLocaleString()} ZiGold**.`,
                                )
                                .addFields({
                                        name: "üí° G·ª£i √Ω",
                                        value: "S·ª≠ d·ª•ng `/zigold` ƒë·ªÉ ki·ªÉm tra s·ªë d∆∞ ho·∫∑c ch∆°i c√°c tr√≤ ch∆°i kh√°c ƒë·ªÉ ki·∫øm ZiGold!",
                                });
                        return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
                }

                const displayChoice = choice === "heads" ? (words.head ?? "Ng·ª≠a") : (words.tail ?? "S·∫•p");

                // Initial embed with spinning animation
                const spinningEmbed = new EmbedBuilder()
                        .setTitle(`${zigold} ZiGold Coinflip`)
                        .setColor("#FFD700")
                        .setDescription(
                                `**${userName}** ƒë√£ c∆∞·ª£c **${zigold} ${bet.toLocaleString()} ZiGold** v√† ch·ªçn **${displayChoice}**\n\n${spin} ƒê·ªìng xu ƒëang quay...`,
                        )
                        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));

                const message = await interaction.reply({ embeds: [spinningEmbed], fetchReply: true });

                // Simulate coin flip delay for suspense
                setTimeout(async () => {
                        try {
                                // First, atomically deduct the bet amount
                                const deductResult = await DataBase.ZiUser.findOneAndUpdate(
                                        { userID: interaction.user.id, coin: { $gte: bet } },
                                        { $inc: { coin: -bet, xp: 1 } },
                                        { new: true, upsert: false },
                                );

                                if (!deductResult) {
                                        const errorEmbed = new EmbedBuilder()
                                                .setTitle("‚ùå Kh√¥ng ƒë·ªß ZiGold")
                                                .setColor("#FF0000")
                                                .setDescription("B·∫°n kh√¥ng c√≤n ƒë·ªß ZiGold ƒë·ªÉ th·ª±c hi·ªán c∆∞·ª£c n√†y!");
                                        return await message.edit({ embeds: [errorEmbed] });
                                }

                                const result = Math.random() < 0.5 ? "heads" : "tails";
                                const win = choice === result;
                                const displayResult = result === "heads" ? (words.head ?? "Ng·ª≠a") : (words.tail ?? "S·∫•p");
                                const resultEmoji = result === "heads" ? heads : tails;

                                let resultText = "";
                                let embedColor = "";
                                let newBalance = deductResult.coin;

                                if (win) {
                                        // Give back the bet + winnings atomically
                                        const winResult = await DataBase.ZiUser.findOneAndUpdate(
                                                { userID: interaction.user.id },
                                                { $inc: { coin: bet * 2 } },
                                                { new: true },
                                        );
                                        newBalance = winResult.coin;
                                        resultText = `${resultEmoji} **${displayResult}** - B·∫°n th·∫Øng **${zigold} ${bet.toLocaleString()} ZiGold**!`;
                                        embedColor = "#00FF00";
                                        
                                        // Update quest progress for gambling wins
                                        await updateQuestProgress(DataBase, interaction.user.id, 'gamble', 1);
                                } else {
                                        resultText = `${resultEmoji} **${displayResult}** - B·∫°n thua **${zigold} ${bet.toLocaleString()} ZiGold**... üò¢`;
                                        embedColor = "#FF0000";
                                }

                                const finalEmbed = new EmbedBuilder()
                                        .setTitle(`${zigold} ZiGold Coinflip - K·∫øt qu·∫£`)
                                        .setColor(embedColor)
                                        .setDescription(
                                                `**${userName}** ƒë√£ c∆∞·ª£c **${zigold} ${bet.toLocaleString()} ZiGold** v√† ch·ªçn **${displayChoice}**\n\n` +
                                                        `üéØ ${words.result ?? "K·∫øt qu·∫£"}: ${resultText}\n\n` +
                                                        `üí∞ S·ªë d∆∞ m·ªõi: **${newBalance.toLocaleString()} ZiGold**`,
                                        )
                                        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));

                                await message.edit({ embeds: [finalEmbed] });
                        } catch (error) {
                                console.error("Coinflip error:", error);
                                const errorEmbed = new EmbedBuilder()
                                        .setTitle("‚ùå L·ªói")
                                        .setColor("#FF0000")
                                        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
                                await message.edit({ embeds: [errorEmbed] });
                        }
                }, 2500); // 2.5 second delay for suspense
        } catch (error) {
                console.error("Coinflip error:", error);
                const errorEmbed = new EmbedBuilder()
                        .setTitle("‚ùå L·ªói")
                        .setColor("#FF0000")
                        .setDescription("C√≥ l·ªói x·∫£y ra khi th·ª±c hi·ªán l·ªánh. Vui l√≤ng th·ª≠ l·∫°i!");
                return await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
        }
};
