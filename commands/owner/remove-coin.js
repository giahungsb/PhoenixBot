const { EmbedBuilder, ApplicationCommandOptionType } = require("discord.js");
const { useDB, useConfig } = require("@zibot/zihooks");
const { ZigoldManager, ZigoldTransactionLogger } = require("../../utils/zigoldManager");

const zigoldEmoji = "ü™ô"; // Bi·ªÉu t∆∞·ª£ng ZiGold

module.exports.data = {
    name: "remove-coin",
    description: "Tr·ª´ ZiGold t·ª´ user (Ch·ªâ Owner)",
    type: 1, // l·ªánh slash
    options: [
        {
            name: "user",
            description: "User c·∫ßn tr·ª´ ZiGold",
            type: ApplicationCommandOptionType.User,
            required: true,
        },
        {
            name: "amount",
            description: "S·ªë l∆∞·ª£ng ZiGold c·∫ßn tr·ª´ (1 - 1,000,000)",
            type: ApplicationCommandOptionType.Integer,
            required: true,
            min_value: 1,
            max_value: 1000000,
        },
        {
            name: "force",
            description: "Cho ph√©p s·ªë d∆∞ √¢m (kh√¥ng b·∫Øt bu·ªôc)",
            type: ApplicationCommandOptionType.Boolean,
            required: false,
        },
        {
            name: "reason",
            description: "L√Ω do tr·ª´ ZiGold (kh√¥ng b·∫Øt bu·ªôc)",
            type: ApplicationCommandOptionType.String,
            required: false,
            max_length: 100,
        },
    ],
    integration_types: [0],
    contexts: [0],
};

module.exports.execute = async ({ interaction, lang }) => {
    const config = useConfig();
    const DataBase = useDB();

    // Ki·ªÉm tra quy·ªÅn Owner
    if (!config.OwnerID.length || !config.OwnerID.includes(interaction.user.id)) {
        const noPermEmbed = new EmbedBuilder()
            .setTitle("‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p")
            .setColor("#FF0000")
            .setDescription("Ch·ªâ c√≥ Owner bot m·ªõi ƒë∆∞·ª£c s·ª≠ d·ª•ng l·ªánh n√†y!")
            .setFooter({ text: "ZiBot ‚Ä¢ Access Denied" })
            .setTimestamp();
        
        return interaction.reply({ embeds: [noPermEmbed], ephemeral: true });
    }

    // Ki·ªÉm tra database
    if (!DataBase || !DataBase.ZiUser) {
        const dbErrorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói Database")
            .setColor("#FF0000")
            .setDescription("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database. Vui l√≤ng th·ª≠ l·∫°i sau!");
        
        return interaction.reply({ embeds: [dbErrorEmbed], ephemeral: true });
    }

    const targetUser = interaction.options.getUser("user");
    const amount = interaction.options.getInteger("amount");
    const force = interaction.options.getBoolean("force") || false;
    const reason = interaction.options.getString("reason") || "Owner manual adjustment";

    try {
        // Validate user v√† amount
        await ZigoldManager.validateUser(targetUser);
        await ZigoldManager.validateAmount(amount);

        // Defer reply ƒë·ªÉ c√≥ th·ªùi gian x·ª≠ l√Ω
        await interaction.deferReply();

        // Log transaction b·∫Øt ƒë·∫ßu
        await ZigoldTransactionLogger.logTransaction(
            targetUser.id,
            amount,
            'SUBTRACT_START',
            interaction.user.id,
            reason,
            { command: 'remove-coin', force: force, guildId: interaction.guild?.id }
        );

        let updatedUser;
        let previousBalance = 0;

        if (force) {
            // Force mode: cho ph√©p s·ªë d∆∞ √¢m, c√≥ th·ªÉ t·∫°o user m·ªõi
            const previousUser = await DataBase.ZiUser.findOne({ userID: targetUser.id });
            previousBalance = previousUser?.coin || 0;

            updatedUser = await DataBase.ZiUser.findOneAndUpdate(
                { userID: targetUser.id },
                { 
                    $inc: { coin: -amount },
                    $setOnInsert: { 
                        name: targetUser.username,
                        userID: targetUser.id,
                        xp: 0,
                        level: 1 
                    }
                },
                { 
                    new: true, 
                    upsert: true,
                    setDefaultsOnInsert: true
                }
            );
        } else {
            // Normal mode: ch·ªâ tr·ª´ n·∫øu ƒë·ªß ti·ªÅn, kh√¥ng t·∫°o user m·ªõi
            updatedUser = await DataBase.ZiUser.findOneAndUpdate(
                { 
                    userID: targetUser.id, 
                    coin: { $gte: amount } // Ch·ªâ tr·ª´ n·∫øu ƒë·ªß ti·ªÅn
                },
                { 
                    $inc: { coin: -amount }
                },
                { 
                    new: true,
                    upsert: false // Kh√¥ng t·∫°o user m·ªõi trong normal mode
                }
            );

            // N·∫øu kh√¥ng update ƒë∆∞·ª£c, c√≥ nghƒ©a l√† user kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng ƒë·ªß ti·ªÅn
            if (!updatedUser) {
                const existingUser = await DataBase.ZiUser.findOne({ userID: targetUser.id });
                if (!existingUser) {
                    throw new Error(`‚ùå **${targetUser.username}** kh√¥ng t·ªìn t·∫°i trong database! S·ª≠ d·ª•ng force mode ƒë·ªÉ t·∫°o user v·ªõi s·ªë d∆∞ √¢m.`);
                } else {
                    const currentBalance = existingUser.coin || 0;
                    throw new Error(`‚ùå **${targetUser.username}** kh√¥ng c√≥ ƒë·ªß ZiGold ƒë·ªÉ tr·ª´! S·ªë d∆∞ hi·ªán t·∫°i: **${zigoldEmoji} ${currentBalance.toLocaleString()} ZiGold**`);
                }
            }

            // T√≠nh previousBalance t·ª´ k·∫øt qu·∫£ hi·ªán t·∫°i
            previousBalance = (updatedUser.coin || 0) + amount;
        }

        // ƒê·∫£m b·∫£o c√≥ k·∫øt qu·∫£ h·ª£p l·ªá
        let finalUser = updatedUser;

        const newBalance = finalUser.coin;
        const userLevel = finalUser.level || 1;

        // Log transaction th√†nh c√¥ng
        await ZigoldTransactionLogger.logTransaction(
            targetUser.id,
            amount,
            'SUBTRACT_SUCCESS',
            interaction.user.id,
            reason,
            { 
                command: 'remove-coin', 
                force: force,
                guildId: interaction.guild?.id,
                newBalance: newBalance,
                previousBalance: previousBalance
            }
        );

        // T·∫°o embed th√†nh c√¥ng
        const successEmbed = await ZigoldManager.createSubtractSuccessEmbed(
            targetUser, 
            amount, 
            newBalance, 
            previousBalance,
            userLevel, 
            interaction.user
        );

        // Th√™m th√¥ng tin v·ªÅ force mode
        if (force && newBalance < 0) {
            successEmbed.addFields({
                name: "‚ö†Ô∏è Force Mode",
                value: "S·ªë d∆∞ √¢m ƒë∆∞·ª£c cho ph√©p",
                inline: true
            });
        }

        // G·ª≠i th√¥ng b√°o cho user (n·∫øu c√≥ th·ªÉ)
        const dmSent = await ZigoldManager.sendSubtractUserNotification(
            targetUser, 
            amount, 
            newBalance, 
            userLevel, 
            interaction.client.user
        );

        // Th√™m th√¥ng tin v·ªÅ DM status
        if (dmSent) {
            successEmbed.addFields({
                name: "üì® Notification",
                value: "User ƒë√£ ƒë∆∞·ª£c th√¥ng b√°o qua DM",
                inline: true
            });
        } else {
            successEmbed.addFields({
                name: "üì® Notification",
                value: "Kh√¥ng th·ªÉ g·ª≠i DM cho user",
                inline: true
            });
        }

        await interaction.followUp({ embeds: [successEmbed] });

    } catch (error) {
        console.error("[REMOVE-COIN-ERROR]", error);

        // Log transaction th·∫•t b·∫°i
        await ZigoldTransactionLogger.logTransaction(
            targetUser.id,
            amount,
            'SUBTRACT_FAILED',
            interaction.user.id,
            reason,
            { 
                command: 'remove-coin', 
                force: force,
                error: error.message,
                guildId: interaction.guild?.id
            }
        );

        const errorEmbed = new EmbedBuilder()
            .setTitle("‚ùå L·ªói tr·ª´ ZiGold")
            .setColor("#FF0000")
            .setDescription(error.message || "C√≥ l·ªói x·∫£y ra khi tr·ª´ ZiGold!")
            .addFields([
                { name: "üë§ Target User", value: `${targetUser.username} (${targetUser.id})`, inline: true },
                { name: "üí∏ Amount", value: `${zigoldEmoji} ${amount.toLocaleString()} ZiGold`, inline: true },
                { name: "‚ö° Force Mode", value: force ? "Enabled" : "Disabled", inline: true },
                { name: "üîç Reason", value: reason, inline: false }
            ])
            .setFooter({ 
                text: `Admin: ${interaction.user.username} ‚Ä¢ ZiBot Error Log`,
                iconURL: interaction.user.displayAvatarURL() 
            })
            .setTimestamp();

        const errorResponse = { embeds: [errorEmbed], ephemeral: true };
        
        if (interaction.replied || interaction.deferred) {
            await interaction.followUp(errorResponse).catch(() => {});
        } else {
            await interaction.reply(errorResponse).catch(() => {});
        }
    }
};