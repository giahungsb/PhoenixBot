const { EmbedBuilder } = require("discord.js");
const { useFunctions, useDB } = require("@zibot/zihooks");

const questEmoji = "üìã"; // Quest emoji
const zigoldEmoji = "ü™ô"; // ZiGold emoji
const sparkleEmoji = "‚ú®"; // Sparkle emoji
const checkEmoji = "‚úÖ"; // Check emoji
const giftEmoji = "üéÅ"; // Gift emoji
const fireEmoji = "üî•"; // Fire emoji

module.exports.data = {
    name: "claim_quest",
    type: "button",
};

module.exports.execute = async ({ interaction, lang }) => {
    try {
        const ZiRank = useFunctions().get("ZiRank");
        const DataBase = useDB();

        // Check if database and functions are properly initialized
        if (!DataBase || !DataBase.ZiUser || !ZiRank) {
            return await handleInitializationError(interaction, !DataBase);
        }

        // Extract data from custom ID and verify ownership
        const customIdParts = interaction.customId.split(':');
        const userId = customIdParts[1];
        const questId = customIdParts[2];
        
        if (interaction.user.id !== userId) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Unauthorized")
                .setColor("#FF4757")
                .setDescription("B·∫°n kh√¥ng th·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng quest c·ªßa ng∆∞·ªùi kh√°c!");
            return await interaction.update({ 
                embeds: [errorEmbed], 
                components: [] 
            });
        }

        // Get user data
        const userDB = await DataBase.ZiUser.findOne({ userID: userId });
        if (!userDB || !userDB.dailyQuests) {
            return await showQuestNotFoundError(interaction);
        }

        // Find the specific quest in both daily and weekly quests
        const dailyQuest = userDB.dailyQuests?.find(q => q.id === questId);
        const weeklyQuest = userDB.weeklyQuests?.find(q => q.id === questId);
        const quest = dailyQuest || weeklyQuest;
        const isWeeklyQuest = !!weeklyQuest;
        
        if (!quest) {
            return await showQuestNotFoundError(interaction);
        }

        if (!quest.completed) {
            return await showQuestNotCompletedError(interaction);
        }

        if (quest.claimed) {
            return await showQuestAlreadyClaimedError(interaction);
        }

        // Process quest claim atomically (including XP)
        const result = await claimQuestReward(DataBase, userId, questId, quest.reward, isWeeklyQuest, ZiRank, interaction.user);
        if (!result.success) {
            return await showClaimError(interaction, result.error);
        }

        // Show success message
        await showClaimSuccess(interaction, quest);

    } catch (error) {
        console.error("Error in claim_quest:", error);
        await handleButtonError(interaction, error);
    }
};

async function claimQuestReward(DataBase, userId, questId, reward, isWeeklyQuest = false, ZiRank = null, user = null) {
    try {
        // Determine which quest array to update
        const questField = isWeeklyQuest ? "weeklyQuests" : "dailyQuests";
        
        // Update the quest as claimed and add rewards atomically
        const result = await DataBase.ZiUser.findOneAndUpdate(
            { 
                userID: userId,
                [`${questField}.id`]: questId,
                [`${questField}.completed`]: true,
                [`${questField}.claimed`]: false
            },
            {
                $set: { [`${questField}.$.claimed`]: true },
                $inc: { coin: reward.zigold }
            },
            { new: true }
        );

        if (!result) {
            return { success: false, error: "Quest kh√¥ng th·ªÉ nh·∫≠n ho·∫∑c ƒë√£ ƒë∆∞·ª£c nh·∫≠n r·ªìi!" };
        }

        // Give XP reward atomically as part of the same operation
        if (ZiRank && user) {
            try {
                await ZiRank.execute({
                    user: user,
                    XpADD: reward.xp,
                    CoinADD: 0
                });
            } catch (xpError) {
                console.error("Error awarding XP:", xpError);
                // XP error shouldn't fail the entire claim since coins were already awarded
            }
        }

        return { success: true, newBalance: result.coin };
    } catch (error) {
        console.error("Error claiming quest reward:", error);
        return { success: false, error: "L·ªói khi nh·∫≠n ph·∫ßn th∆∞·ªüng quest!" };
    }
}

async function showClaimSuccess(interaction, quest) {
    const questTypes = {
        hunt: { name: "Hunt Animals", emoji: "üèπ" },
        feed: { name: "Feed Pets", emoji: "üçñ" },
        play: { name: "Pet Playtime", emoji: "üéæ" },
        gamble: { name: "Lucky Player", emoji: "üé∞" },
        battle: { name: "Battle Warrior", emoji: "‚öîÔ∏è" }
    };

    // Handle both daily and weekly quests
    let questConfig;
    if (quest.questType === 'weekly') {
        questConfig = { name: quest.name, emoji: quest.emoji || "üèÜ" };
    } else {
        questConfig = questTypes[quest.type] || { name: "Unknown Quest", emoji: "‚ùì" };
    }

    const questTypeLabel = quest.questType === 'weekly' ? 'üî• Weekly Quest' : 'üìÖ Daily Quest';
    let description = `${sparkleEmoji} **${questTypeLabel} ho√†n th√†nh th√†nh c√¥ng!**\n\n`;
    description += `${questConfig.emoji} **${questConfig.name}**\n`;
    description += `‚úÖ ${quest.description}\n\n`;
    description += `üéÅ **Ph·∫ßn th∆∞·ªüng ƒë√£ nh·∫≠n:**\n`;
    description += `üí∞ ${quest.reward.zigold.toLocaleString()} ZiGold\n`;
    description += `‚≠ê ${quest.reward.xp} XP\n\n`;
    description += `${fireEmoji} **Ch√∫c m·ª´ng! H√£y ti·∫øp t·ª•c ho√†n th√†nh c√°c quest kh√°c!**`;

    const embed = new EmbedBuilder()
        .setTitle(`${giftEmoji} Quest Reward Claimed`)
        .setColor("#00FF00")
        .setDescription(description)
        .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
        .setFooter({ 
            text: `Quest ho√†n th√†nh! Ki·ªÉm tra /quests ƒë·ªÉ xem quest kh√°c`, 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    await interaction.update({ embeds: [embed], components: [] });
}

async function showQuestNotFoundError(interaction) {
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå Quest kh√¥ng t√¨m th·∫•y")
        .setColor("#FF4757")
        .setDescription("Quest n√†y kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n!");
    await interaction.update({ embeds: [errorEmbed], components: [] });
}

async function showQuestNotCompletedError(interaction) {
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå Quest ch∆∞a ho√†n th√†nh")
        .setColor("#FF4757")
        .setDescription("B·∫°n c·∫ßn ho√†n th√†nh quest n√†y tr∆∞·ªõc khi nh·∫≠n ph·∫ßn th∆∞·ªüng!");
    await interaction.update({ embeds: [errorEmbed], components: [] });
}

async function showQuestAlreadyClaimedError(interaction) {
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå ƒê√£ nh·∫≠n r·ªìi")
        .setColor("#FF4757")
        .setDescription("B·∫°n ƒë√£ nh·∫≠n ph·∫ßn th∆∞·ªüng quest n√†y r·ªìi!");
    await interaction.update({ embeds: [errorEmbed], components: [] });
}

async function showClaimError(interaction, errorMessage) {
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói nh·∫≠n th∆∞·ªüng")
        .setColor("#FF4757")
        .setDescription(`**L·ªói:** ${errorMessage}\n\nüîÑ Vui l√≤ng th·ª≠ l·∫°i!`);
    await interaction.update({ embeds: [errorEmbed], components: [] });
}

async function handleInitializationError(interaction, isDatabaseError) {
    const errorEmbed = new EmbedBuilder()
        .setTitle(`‚ö†Ô∏è ${sparkleEmoji} Kh·ªüi t·∫°o h·ªá th·ªëng`)
        .setColor("#FFD700")
        .setDescription(
            isDatabaseError 
                ? "üîÑ **ƒêang kh·ªüi t·∫°o database...**\n\n‚è≥ Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t v√† th·ª≠ l·∫°i!"
                : "üîÑ **ƒêang kh·ªüi t·∫°o functions...**\n\n‚è≥ Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t v√† th·ª≠ l·∫°i!"
        )
        .setThumbnail(interaction.client.user.displayAvatarURL({ size: 1024 }))
        .setFooter({ 
            text: "H·ªá th·ªëng ƒëang ƒë∆∞·ª£c kh·ªüi t·∫°o, vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t!", 
            iconURL: interaction.client.user.displayAvatarURL() 
        })
        .setTimestamp();

    if (interaction.replied || interaction.deferred) {
        return await interaction.editReply({ embeds: [errorEmbed] });
    } else {
        return await interaction.update({ embeds: [errorEmbed], components: [] });
    }
}

async function handleButtonError(interaction, error) {
    console.error("Claim quest button error:", error);
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói")
        .setColor("#FF0000")
        .setDescription("C√≥ l·ªói x·∫£y ra khi nh·∫≠n ph·∫ßn th∆∞·ªüng quest. Vui l√≤ng th·ª≠ l·∫°i!");
    
    try {
        if (interaction.replied || interaction.deferred) {
            return await interaction.editReply({ embeds: [errorEmbed], components: [] });
        } else {
            return await interaction.update({ embeds: [errorEmbed], components: [] });
        }
    } catch (updateError) {
        console.error("Failed to update interaction after error:", updateError);
    }
}