const { EmbedBuilder } = require("discord.js");

module.exports.data = {
    name: "cancel_give",
    type: "button",
};

module.exports.execute = async ({ interaction, lang }) => {
    try {
        // Extract user ID from custom ID and verify ownership
        const customIdParts = interaction.customId.split(':');
        const authorId = customIdParts[1];
        const transactionId = customIdParts[2] || 'unknown';
        
        if (interaction.user.id !== authorId) {
            const errorEmbed = new EmbedBuilder()
                .setTitle("‚ùå Unauthorized")
                .setColor("#FF4757")
                .setDescription("B·∫°n kh√¥ng th·ªÉ s·ª≠ d·ª•ng button n√†y!");
            return await interaction.update({ 
                embeds: [errorEmbed], 
                components: [] 
            });
        }

        // Create cancellation embed
        const cancelEmbed = new EmbedBuilder()
            .setTitle("‚ùå Give Cancelled")
            .setColor("#9E9E9E")
            .setDescription("**B·∫°n ƒë√£ h·ªßy vi·ªác t·∫∑ng animal.**\n\nüéÅ Kh√¥ng c√≥ animal n√†o ƒë∆∞·ª£c chuy·ªÉn.\nü¶Å Collection c·ªßa b·∫°n v·∫´n an to√†n!\n\nüí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh `/giveanimal` b·∫•t c·ª© l√∫c n√†o ƒë·ªÉ t·∫∑ng animals cho b·∫°n b√®!")
            .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }))
            .setFooter({ 
                text: `Chia s·∫ª l√† quan t√¢m! ‚Ä¢ TX: ${transactionId.substr(-8)}`,
                iconURL: interaction.client.user.displayAvatarURL() 
            })
            .setTimestamp();

        // Use interaction.update instead of interaction.reply to properly update the original message
        await interaction.update({ 
            embeds: [cancelEmbed], 
            components: [] // Remove all buttons
        });

    } catch (error) {
        console.error("Error in cancel_give:", error);
        await handleButtonError(interaction, error);
    }
};

async function handleButtonError(interaction, error) {
    console.error("Cancel give button error:", error);
    const errorEmbed = new EmbedBuilder()
        .setTitle("‚ùå L·ªói")
        .setColor("#FF0000")
        .setDescription("C√≥ l·ªói x·∫£y ra khi h·ªßy t·∫∑ng. Vui l√≤ng th·ª≠ l·∫°i!");
    
    try {
        if (interaction.replied || interaction.deferred) {
            return await interaction.editReply({ embeds: [errorEmbed], components: [] });
        } else {
            return await interaction.update({ embeds: [errorEmbed], components: [] });
        }
    } catch (updateError) {
        console.error("Failed to update interaction after error:", updateError);
    }
}